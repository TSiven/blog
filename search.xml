<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>中间件Docker容器环境部署</title>
      <link href="//posts/1c6433c8.html"/>
      <url>//posts/1c6433c8.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、mysql"><a href="#一、mysql" class="headerlink" title="一、mysql"></a>一、mysql</h2><h3 id="1-创建-data-mysql目录："><a href="#1-创建-data-mysql目录：" class="headerlink" title="1. 创建/data/mysql目录："></a>1. 创建/data/mysql目录：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/mysql/</span><br></pre></td></tr></table></figure><h3 id="2-在-data-mysql-conf目录下创建my-cnf文件"><a href="#2-在-data-mysql-conf目录下创建my-cnf文件" class="headerlink" title="2. 在/data/mysql/conf目录下创建my.cnf文件"></a>2. 在/data/mysql/conf目录下创建my.cnf文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /data/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure><a id="more"></a><p>该文件为mysql配置文件，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"></span><br><span class="line">pid-file    = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket      = /var/run/mysqld/mysqld.sock</span><br><span class="line">log-error   = /var/run/mysqld/logs/error.log</span><br><span class="line">datadir     = /var/lib/mysql</span><br><span class="line"></span><br><span class="line">user = mysql</span><br><span class="line">tmpdir = /tmp</span><br><span class="line"></span><br><span class="line">default-storage-engine=INNODB </span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server = utf8_general_ci </span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure></p><h3 id="3-拉取mysql镜像："><a href="#3-拉取mysql镜像：" class="headerlink" title="3. 拉取mysql镜像："></a>3. 拉取mysql镜像：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure><h3 id="4-创建并运行mysql容器："><a href="#4-创建并运行mysql容器：" class="headerlink" title="4. 创建并运行mysql容器："></a>4. 创建并运行mysql容器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name mysql \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    -p 3306:3306 \</span><br><span class="line">    -e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v /data/mysql/my.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf \</span><br><span class="line">    -v /data/mysql/data:/var/lib/mysql \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=p@ssw0rd \</span><br><span class="line">    -d mysql:5.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">    --name mysql \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    -p 3306:3306 \</span><br><span class="line">    -v /data/mysql/data:/var/lib/mysql \</span><br><span class="line">    -v /data/mysql/conf/my.cnf:/etc/mysql/conf.d/mysqld.cnf \</span><br><span class="line">    -e MYSQL_ROOT_PASSWORD=p@ssw0rd \</span><br><span class="line">    -d mysql:5.6</span><br></pre></td></tr></table></figure><p><strong>命令说明</strong></p><ul><li>–name mysql：指定容器名称</li><li>–restart=always：随docker主机启动而启动</li><li>–privileged=true: 使用该参数，container内的root拥有真正的root权限, 否则，container内的root只是外部的一个普通用户权限。</li><li>-p 3306:3306：将容器的3306端口映射到主机的3306端口</li><li>-v /data/mysql/conf/my.cnf:/etc/mysql/conf.d/mysqld.cnf：将主机/data/mysql/cnf/my.cnf文件挂载到容器的/etc/mysql/mysql.conf.d/mysqld.cnf</li><li>-v /data/mysql/data:/var/lib/mysql：将主机/data/mysql/data文件挂载到容器的/var/lib/mysql</li><li>-e MYSQL_ROOT_PASSWORD=p@ssw0rd：初始化root用户的密码</li><li>-d：后台运行容器，并返回容器ID</li><li>mysql:5.6: mysql镜像名称</li></ul><h2 id="二、rabbitmq"><a href="#二、rabbitmq" class="headerlink" title="二、rabbitmq"></a>二、rabbitmq</h2><h3 id="1-创建-data-rabbitmq目录："><a href="#1-创建-data-rabbitmq目录：" class="headerlink" title="1. 创建/data/rabbitmq目录："></a>1. 创建/data/rabbitmq目录：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/rabbitmq</span><br></pre></td></tr></table></figure><h3 id="2-在-data-rabbitmq目录下创建rabbitmq-conf文件，该文件为rabbitmq配置文件，内容如下："><a href="#2-在-data-rabbitmq目录下创建rabbitmq-conf文件，该文件为rabbitmq配置文件，内容如下：" class="headerlink" title="2. 在/data/rabbitmq目录下创建rabbitmq.conf文件，该文件为rabbitmq配置文件，内容如下："></a>2. 在/data/rabbitmq目录下创建rabbitmq.conf文件，该文件为rabbitmq配置文件，内容如下：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">loopback_users.guest = false</span><br><span class="line">listeners.tcp.default = 5672</span><br><span class="line">default_pass = admin</span><br><span class="line">default_user = admin</span><br><span class="line">hipe_compile = false</span><br></pre></td></tr></table></figure><h3 id="3-拉取rabbitmq镜像："><a href="#3-拉取rabbitmq镜像：" class="headerlink" title="3. 拉取rabbitmq镜像："></a>3. 拉取rabbitmq镜像：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure><h3 id="4-创建并运行rabbitmq容器："><a href="#4-创建并运行rabbitmq容器：" class="headerlink" title="4. 创建并运行rabbitmq容器："></a>4. 创建并运行rabbitmq容器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name rabbit \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    -p 15672:15672 \</span><br><span class="line">    -p 5672:5672 \</span><br><span class="line">    -e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v /data/rabbitmq:/var/lib/rabbitmq \</span><br><span class="line">    -e RABBITMQ_DEFAULT_USER=admin \</span><br><span class="line">    -e RABBITMQ_DEFAULT_PASS=admin \</span><br><span class="line">    -d rabbitmq:3.7-management</span><br></pre></td></tr></table></figure><p><strong>命令说明</strong></p><ul><li>–name rabbit：指定容器名称</li><li>–restart=always：随docker主机启动而启动</li><li>-p 15672:15672：将容器的15672端口映射到主机的15672端口</li><li>-p 5672:5672：将容器的5672端口映射到主机的5672端口</li><li>-v /data/rabbitmq:/var/lib/rabbitmq：将主机/data/rabbitmq文件挂载到容器的/var/lib/rabbitmq</li><li>-e RABBITMQ_DEFAULT_USER=admin：初始化用户名</li><li>-e RABBITMQ_DEFAULT_PASS=hongte888：初始化密码</li><li>-d：后台运行容器，并返回容器ID</li><li>rabbitmq:3.7-management: 镜像名称</li></ul><h3 id="5-访问rabbitmq"><a href="#5-访问rabbitmq" class="headerlink" title="5. 访问rabbitmq"></a>5. 访问rabbitmq</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:15672/</span><br><span class="line">账号密码：admin/admin</span><br></pre></td></tr></table></figure><h2 id="三、redis"><a href="#三、redis" class="headerlink" title="三、redis"></a>三、redis</h2><h3 id="1-创建-data-redis目录："><a href="#1-创建-data-redis目录：" class="headerlink" title="1. 创建/data/redis目录："></a>1. 创建/data/redis目录：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/mysql</span><br></pre></td></tr></table></figure><h3 id="2-在-data-redis目录下创建redis-conf文件（文件内容默认为空），该文件为redis的配置文件；"><a href="#2-在-data-redis目录下创建redis-conf文件（文件内容默认为空），该文件为redis的配置文件；" class="headerlink" title="2. 在/data/redis目录下创建redis.conf文件（文件内容默认为空），该文件为redis的配置文件；"></a>2. 在/data/redis目录下创建redis.conf文件（文件内容默认为空），该文件为redis的配置文件；</h3><h3 id="3-拉取redis镜像："><a href="#3-拉取redis镜像：" class="headerlink" title="3. 拉取redis镜像："></a>3. 拉取redis镜像：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:4.0.5</span><br></pre></td></tr></table></figure><h3 id="4-创建并运行redis容器："><a href="#4-创建并运行redis容器：" class="headerlink" title="4. 创建并运行redis容器："></a>4. 创建并运行redis容器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name redis \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    -p 6379:6379 \</span><br><span class="line">    -e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v /data/redis/redis.conf:/usr/local/etc/redis/redis.conf \</span><br><span class="line">    -v /data/redis/data:/data  \</span><br><span class="line">    -d redis:4.0.5 \</span><br><span class="line">    redis-server /usr/local/etc/redis/redis.conf\</span><br><span class="line">    --appendonly yes \</span><br><span class="line">    --requirepass &quot;admin&quot;</span><br></pre></td></tr></table></figure><p><strong>命令说明</strong></p><ul><li>–name redis：指定容器名称</li><li>–restart=always：随docker主机启动而启动</li><li>-p 6379:6379：将容器的3306端口映射到主机的3306端口</li><li>-v /data/redis/redis.conf:/usr/local/etc/redis/redis.conf：将主机/data/redis/redis.conf文件挂载到容器的/usr/local/etc/redis/redis.conf</li><li>-v /data/redis/data:/data：将主机/data/redis/data文件挂载到容器的/data</li><li>-d：后台运行容器，并返回容器ID</li><li>redis:4.0.5: 镜像名称</li><li>–requirepass “admin”：redis访问密码</li></ul><h3 id="5-连接redis的方法："><a href="#5-连接redis的方法：" class="headerlink" title="5. 连接redis的方法："></a>5. 连接redis的方法：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it redis redis-cli -a hongte888</span><br></pre></td></tr></table></figure><h2 id="四、nexus"><a href="#四、nexus" class="headerlink" title="四、nexus"></a>四、nexus</h2><h3 id="1-创建-data-nexus-data目录："><a href="#1-创建-data-nexus-data目录：" class="headerlink" title="1. 创建/data/nexus/data目录："></a>1. 创建/data/nexus/data目录：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/nexus &amp;&amp; mkdir /data/nexus/data &amp;&amp; chown -R 200 /data/nexus/data</span><br></pre></td></tr></table></figure><h3 id="2-拉取nexus3镜像："><a href="#2-拉取nexus3镜像：" class="headerlink" title="2. 拉取nexus3镜像："></a>2. 拉取nexus3镜像：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nexus3:3.8.0</span><br></pre></td></tr></table></figure><h3 id="3-创建并运行nexus3容器："><a href="#3-创建并运行nexus3容器：" class="headerlink" title="3. 创建并运行nexus3容器："></a>3. 创建并运行nexus3容器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name nexus \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    -p 8081:8081 \</span><br><span class="line">    -e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v /data/nexus/data:/nexus-data \</span><br><span class="line">    -d nexus3:3.8.0</span><br></pre></td></tr></table></figure><p><strong>命令说明</strong></p><ul><li>–name nexus：指定容器名称</li><li>–restart=always：随docker主机启动而启动</li><li>-p 8081:8081：将容器的8081端口映射到主机的8081端口</li><li>-v /data/nexus/data:/nexus-data：将主机/data/nexus/data文件挂载到容器的/nexus-data</li><li>-d：后台运行容器，并返回容器ID</li><li>nexus3:3.8.0: 镜像名称</li></ul><h3 id="4-访问nexus"><a href="#4-访问nexus" class="headerlink" title="4. 访问nexus"></a>4. 访问nexus</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://172.16.200.111:8081/</span><br><span class="line">默认账号密码：admin/admin123</span><br></pre></td></tr></table></figure><h2 id="五、jenkins"><a href="#五、jenkins" class="headerlink" title="五、jenkins"></a>五、jenkins</h2><h3 id="1-创建-data-jenkins目录："><a href="#1-创建-data-jenkins目录：" class="headerlink" title="1. 创建/data/jenkins目录："></a>1. 创建/data/jenkins目录：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/jenkins &amp;&amp; chown -R 1000 /data/jenkins</span><br></pre></td></tr></table></figure><h3 id="2-拉取jenkins镜像："><a href="#2-拉取jenkins镜像：" class="headerlink" title="2. 拉取jenkins镜像："></a>2. 拉取jenkins镜像：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull jenkins/jenkins:2.138.2</span><br></pre></td></tr></table></figure><h3 id="3-创建并运行jenkins容器："><a href="#3-创建并运行jenkins容器：" class="headerlink" title="3. 创建并运行jenkins容器："></a>3. 创建并运行jenkins容器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name jenkins \</span><br><span class="line">    --restart=always \</span><br><span class="line">    --privileged=true \</span><br><span class="line">    --net=host \</span><br><span class="line">    -e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">    -v /var/run/docker.sock:/var/run/docker.sock   \</span><br><span class="line">    -v /usr/bin/docker:/usr/bin/docker  \</span><br><span class="line">    -v /usr/lib64/libltdl.so.7:/usr/lib/x86_64-linux-gnu/libltdl.so.7 \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v /data/jenkins:/var/jenkins_home \</span><br><span class="line">    -v /data/apache-maven-3.5.4:/data/apache-maven-3.5.4 \</span><br><span class="line">    --env JAVA_OPTS=&quot;-Djava.util.logging.config.file=/var/jenkins_home/log.properties&quot; \</span><br><span class="line">    -d jenkins/jenkins:2.138.2</span><br></pre></td></tr></table></figure><p><strong>命令说明</strong></p><ul><li>–name jenkins：指定容器名称</li><li>–restart=always：随docker主机启动而启动</li><li>-p 8080:8080：将容器的8080端口映射到主机的8080端口</li><li>-p 50000:50000：将容器的50000端口映射到主机的50000端口</li><li>-v /data/jenkins:/var/jenkins_home：将主机<code>/data/jenkins</code>文件挂载到容器的<code>/ver/jenkins_home</code></li><li>-v /data/apache-maven-3.5.2:/data/apache-maven-3.5.2：将主机<code>/data/apache-maven-3.5.2</code>文件挂载到容器的<code>/data/apache-maven-3.5.2</code>，由于jenkins容器内没有安装maven，所以需要外挂maven到容器内</li><li>-d：后台运行容器，并返回容器ID</li><li>jenkins:2.89.4: 镜像名称</li></ul><p><strong>注意</strong><br>docker在容器内构建的时候，如果出现权限不够什么的。可以在宿主机中使用以下两种方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 777 /var/run/docker.sock</span><br><span class="line">或者</span><br><span class="line">usermod -a -G docker jenkin</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">### 4. 访问jenkins</span><br></pre></td></tr></table></figure></p><p><a href="http://172.16.200.111:8080/" target="_blank" rel="noopener">http://172.16.200.111:8080/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## 六、mongo</span><br><span class="line">### 1. 拉取mongo镜像：</span><br></pre></td></tr></table></figure></p><p>docker pull mongo:3.4.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 2. 创建并运行mongo容器：</span><br></pre></td></tr></table></figure></p><p>docker run \<br>    –name mongo \<br>    –restart=always \<br>    –privileged=true \<br>    -p 27017:27017 \<br>    -e TZ=”Asia/Shanghai” \<br>    -v /etc/localtime:/etc/localtime \<br>    -v /data/mongo/datadir:/data/db \<br>    -d mongo:3.4.1 –auth<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">**命令说明**</span><br><span class="line"></span><br><span class="line">- --name mongo：指定容器名称</span><br><span class="line">- --restart=always：随docker主机启动而启动</span><br><span class="line">- -p 27017:27017：将容器的27017端口映射到主机的27017端口</span><br><span class="line">- -v /data/mongo/datadir:/data/db：将主机`/data/mongo/datadir`文件挂载到容器的`/data/db`</span><br><span class="line">- -d：后台运行容器，并返回容器ID</span><br><span class="line">- mongo:3.4.1: 镜像名称</span><br><span class="line"></span><br><span class="line">### 3. 创建账号密码：</span><br></pre></td></tr></table></figure></p><p>docker exec -it mongo mongo admin</p><p>connecting to: admin</p><blockquote><p>db.createUser({ user: ‘root’, pwd: ‘hongte888’, roles: [ { role: “root”, db: “admin” } ] });<br>Successfully added user: {<br>    “user” : “root”,<br>    “roles” : [<br>        {<br>            “role” : “root”,<br>            “db” : “admin”<br>        }<br>    ]<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 六、sonar</span><br><span class="line">### 1. 在mysql数据库中创建sonar，并创建独立的账号密码用于操作sonar数据库。</span><br><span class="line">### 2. 拉取sonar镜像：</span><br></pre></td></tr></table></figure></p></blockquote><p>docker pull sonarqube:7.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 3. 创建并且启动容器</span><br></pre></td></tr></table></figure></p><p>docker run \<br>    –name sonar \<br>    –restart=always \<br>    –privileged=true \<br>    -p 9000:9000 \<br>    -p 9092:9092 \<br>    -e TZ=”Asia/Shanghai” \<br>    -v /etc/localtime:/etc/localtime \<br>    -e SONARQUBE_JDBC_USERNAME=sonar \<br>    -e SONARQUBE_JDBC_PASSWORD=1vgne9Xu \<br>    -e SONARQUBE_JDBC_URL=jdbc:mysql://172.16.200.111:3306/sonar?useUnicode=true\&amp;characterEncoding=utf8 \<br>    -d sonarqube:7.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">**命令说明**</span><br><span class="line"></span><br><span class="line">- --name sonar：指定容器名称</span><br><span class="line">- --restart=always：随docker主机启动而启动</span><br><span class="line">- -p 9000:9000：将容器的9000端口映射到主机的9000端口</span><br><span class="line">- -p 9092:9092：将容器的9092端口映射到主机的9092端口</span><br><span class="line">- -e SONARQUBE_JDBC_USERNAME=sonar：连接数据库的账号</span><br><span class="line">- -e SONARQUBE_JDBC_PASSWORD=1vgne9Xu：连接数据库的密码</span><br><span class="line">- -e SONARQUBE_JDBC_URL=jdbc:mysql://mysql_server:3306/sonar?useUnicode=true\&amp;characterEncoding=utf8：连接数据库的jdbcurl，注意`useUnicode=true\&amp;characterEncoding=utf8`是必须加的</span><br><span class="line">- -d：后台运行容器，并返回容器ID</span><br><span class="line">- sonarqube:7.0: 镜像名称</span><br><span class="line"></span><br><span class="line">### 4. 汉化sonar</span><br><span class="line">### 1. [下载汉化包](https://github.com/SonarQubeCommunity/sonar-l10n-zh)</span><br><span class="line">### 2. 载后，放入sonar目录，如：sonarqube-5.6\extensions\plugins</span><br><span class="line">### 3. docker通过以下命令放入容器中：</span><br></pre></td></tr></table></figure></p><p>docker cp /data/sonar/sonar-l10n-zh-plugin-1.20.jar sonar:/opt/sonarqube/extensions/plugins<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">### 4. 访问sonar</span><br></pre></td></tr></table></figure></p><p><a href="http://172.16.200.111:9000/" target="_blank" rel="noopener">http://172.16.200.111:9000/</a><br>账号密码：admin/admin<br><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科学上网</title>
      <link href="//posts/812d49a5.html"/>
      <url>//posts/812d49a5.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>自建科学上网共享工具，现开放注册，欢迎使用： <a href="http://vpn.siven.net" target="_blank" rel="noopener">http://vpn.siven.net</a></p><p>服务是基于ssserver搭建，需要安装shadowsocks客户端方可使用，以下为Windows、Mac OS、Android和iOS下载ss客户端及配置方法，以供参考。如有任何使用疑问，可随时<a href="http://chat.daovoice.io?id=0b11d332" target="_blank" rel="noopener">与我联系</a>😊。</p><h1 id="客户端列表"><a href="#客户端列表" class="headerlink" title="客户端列表"></a>客户端列表</h1><ul><li><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">Windows</a></li><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">Mac OS</a></li><li><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="noopener">Android</a></li></ul><a id="more"></a><hr><p>IOS客户端安装办法：直接在「App Store」里搜索<code>shadowsock</code>关键字（或者<code>wingy</code>关键字），软件经常被下架，我目前用的是<code>SuperWingy</code> &amp; Shadowrocket~如果找不到，你也可以通过PP助手去下载Shadowrocket。<br>收费软件：「SuperWingy」，「ShadowBroken」。推荐免费下载iOS客户端方法：也可以电脑下载PP助手，手机连上电脑后会自动将PP助手同步至手机，不需要越狱，之后在手机上通过PP助手下载shadowrocket</p><h1 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h1><p>注册安装完成后， 点击”账号”按钮可查看IP、端口、密码、加密方式、二维码等节点信息，如下图：</p><ul><li>节点信息:<br><img src="http://qiniu-pic.siven.net/blog/52tmg.png" alt></li></ul><h2 id="快捷配置"><a href="#快捷配置" class="headerlink" title="快捷配置"></a>快捷配置</h2><p>下载安装客户端后，可使用扫描屏幕二维码功能快捷添加节点信息(需要打开二维码页码)，安卓、苹果等设备亦可使用客户端的「扫描二维码」功能添加节点信息。这里就不做演示，自行研究一下就明白了 😊</p><ul><li>扫描屏幕二维码:<br><img src="http://qiniu-pic.siven.net/blog/rnh2b.png" alt></li></ul><ul><li>Mac OS 添加节点示例:<br><img src="http://qiniu-pic.siven.net/blog/gol85.gif" alt></li></ul><h2 id="Windows客户端"><a href="#Windows客户端" class="headerlink" title="Windows客户端"></a>Windows客户端</h2><p>下载好Shadowsocks.zip，解压，里面只有一个Shadowsocks.exe。打开，输入自己的服务器ip、端口、密码：<br><img src="http://qiniu-pic.siven.net/blog/dssa7.jpg" alt></p><p>确定后在电脑右下角飞机图标点启动系统代理，系统代理模式有PAC模式和全局模式，前者是只有被墙的网站用vps代理，后者是所有连接走代理<br><img src="http://qiniu-pic.siven.net/blog/261d6.jpg" alt></p><h2 id="Android客户端"><a href="#Android客户端" class="headerlink" title="Android客户端"></a>Android客户端</h2><p>安装下载的apk文件，安装完成后打开“影梭”，点击“手动设置”<br><img src="http://qiniu-pic.siven.net/blog/ol45p.jpg" alt></p><p>填写服务器信息<br><img src="http://qiniu-pic.siven.net/blog/nkaef.jpg" alt></p><p>为了有更好的使用体验，我强烈建议如下设置。</p><blockquote><p>功能设置里的路由，由原来的全局模式，修改为“绕过局域网及中国大陆地址”。这样不会干扰你的正常上网，也就是说你上百度、微博、微信之类的网站或应用，不会影响到你的流畅体验。</p></blockquote><p><img src="http://qiniu-pic.siven.net/blog/vxlis.jpg" alt></p><p>添加完配置后，可以检查一下各项参数，如果确认无误，就可以点击右上角的小飞机，控制开始和关闭。灰色表示关闭状态；绿色表示已打开。<br><img src="http://qiniu-pic.siven.net/blog/jouug.jpg" alt></p><h2 id="Mac-OS客户端"><a href="#Mac-OS客户端" class="headerlink" title="Mac OS客户端"></a>Mac OS客户端</h2><p>下载安装后，点击飞机图标，选择<code>服务器</code>，点击<code>服务器设置</code><br><img src="http://qiniu-pic.siven.net/blog/f6f40.png" alt></p><p>点击左下角<code>+</code>,填写IP，端口，选择设置的加密方法，填写密码后，点击确定即可<br><img src="http://qiniu-pic.siven.net/blog/yjnrz.png" alt></p><h2 id="iOS客户端"><a href="#iOS客户端" class="headerlink" title="iOS客户端"></a>iOS客户端</h2><p>以下使用的客户端为<code>SuperWingy</code>，不同的客户端可能有一些差异，仅供参考；<br>添加服务器有两种方式：</p><ul><li>扫一扫二维码添加服务器（推荐）</li><li>点击“+”按钮，新增服务器</li></ul><p><img src="http://qiniu-pic.siven.net/blog/vmgse.jpg" alt></p><p>选择<code>SS</code>类型<br><img src="http://qiniu-pic.siven.net/blog/40o82.jpg" alt></p><p>填写IP，端口，选择设置的加密方法，填写密码后，点击确定即可<br><img src="http://qiniu-pic.siven.net/blog/r26yi.jpg" alt></p><hr><ul><li><a href="https://vultr.aicnm.com/Windows、Mac、安卓和iOS下载ss客户端及配置方法/" target="_blank" rel="noopener">参考文章</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> shadowsock </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shadowsock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker常用命令</title>
      <link href="//posts/29dc6fe8.html"/>
      <url>//posts/29dc6fe8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h1><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest <span class="comment">#latest:是指镜像最高版本号</span></span><br></pre></td></tr></table></figure><h2 id="查看镜像列表"><a href="#查看镜像列表" class="headerlink" title="查看镜像列表"></a>查看镜像列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="查看镜像构建过程"><a href="#查看镜像构建过程" class="headerlink" title="查看镜像构建过程"></a>查看镜像构建过程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker <span class="built_in">history</span> [OPTIONS] IMAGE</span><br><span class="line">Show the <span class="built_in">history</span> of an image</span><br><span class="line">Options:</span><br><span class="line">        ‐‐format string 使用Go模板的美观的打印镜像。</span><br><span class="line">    ‐H, ‐‐human 打印人类可读的大小和日期格式(default <span class="literal">true</span>)</span><br><span class="line">        ‐‐no‐trunc 不截断输出</span><br><span class="line">    ‐q, ‐‐quiet 只显示镜像编号</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br><span class="line">Remove one or more images</span><br><span class="line">Options:</span><br><span class="line">    ‐f, ‐‐force 强制删除镜像</span><br><span class="line">        ‐‐no‐prune 不移除该镜像的过程镜像，默认移除</span><br></pre></td></tr></table></figure><h1 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h1><h2 id="查看配置信息"><a href="#查看配置信息" class="headerlink" title="查看配置信息"></a>查看配置信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info</span><br></pre></td></tr></table></figure><h2 id="查看容器列表"><a href="#查看容器列表" class="headerlink" title="查看容器列表"></a>查看容器列表</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker ps [OPTIONS]</span><br><span class="line">List containers</span><br><span class="line">Options:</span><br><span class="line">    ‐a, ‐‐all 显示所有容器 (默认显示运行)</span><br><span class="line">    ‐f, ‐‐filter filter 根据提供的条件过滤显示的内容</span><br><span class="line">        ‐‐format string 使用Go模板的美观的打印容器。</span><br><span class="line">    ‐n, ‐‐last int 显示最后一个创建的容器 (includes all states) (default ‐1)</span><br><span class="line">    ‐l, ‐‐latest 显示最新创建的容器。(includes all states)</span><br><span class="line">        ‐‐no‐trunc 不截断输出</span><br><span class="line">    ‐q, ‐‐quiet 只显示容器编号</span><br><span class="line">    ‐s, ‐‐size 显示总的文件大小</span><br></pre></td></tr></table></figure><h2 id="创建并运行容器"><a href="#创建并运行容器" class="headerlink" title="创建并运行容器"></a>创建并运行容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker run [OPTIONS]</span><br><span class="line">Options:</span><br><span class="line">    -d 后台运行</span><br><span class="line">    -it 进入容器</span><br><span class="line">    --name 给容器取名</span><br></pre></td></tr></table></figure><ul><li>随机映射端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name mynginx nginx</span><br></pre></td></tr></table></figure><ul><li>指定映射端口</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 --name mynginx nginx</span><br></pre></td></tr></table></figure><ul><li>映射宿主机文件目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name volume-test1 -h nginx -v /data centos</span><br></pre></td></tr></table></figure><ul><li>查看宿主机文件目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect --format <span class="string">"&#123;&#123;.Mounts&#125;&#125;"</span> volume-test1</span><br></pre></td></tr></table></figure><ul><li>映射宿主机指定文件目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name volume-test2 -h nginx -v /root/blog:/root/blog centos</span><br></pre></td></tr></table></figure><h2 id="启动、停止、重启容器"><a href="#启动、停止、重启容器" class="headerlink" title="启动、停止、重启容器"></a>启动、停止、重启容器</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">Start one or more stopped containers</span><br><span class="line">Options:</span><br><span class="line">    ‐a, ‐‐attach 启动一个容器并打印输出结果和错误</span><br><span class="line">        ‐‐checkpoint string 从这个检查点恢复</span><br><span class="line">        ‐‐checkpoint‐dir string 使用一个自定义检查点存储目录</span><br><span class="line">        ‐‐detach‐keys string 重写分离容器的键序列</span><br><span class="line">    ‐i, ‐‐interactive 启动一个容器并进入交互模式</span><br></pre></td></tr></table></figure><h3 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">Restart one or more containers</span><br><span class="line">Options:</span><br><span class="line">    ‐t, ‐‐time int 停止或者重启容器的超时时间（秒），超时后系统将杀死进程(default 10)</span><br><span class="line">停止</span><br></pre></td></tr></table></figure><h3 id="停止"><a href="#停止" class="headerlink" title="停止"></a>停止</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">Stop one or more running containers</span><br><span class="line">Options:</span><br><span class="line">    ‐t, ‐‐time int 停止或者重启容器的超时时间（秒），超时后系统将杀死进程(default 10)</span><br></pre></td></tr></table></figure><h2 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line">Remove one or more containers</span><br><span class="line">Options:</span><br><span class="line">    ‐f, ‐‐force 强制移除正在运行的容器(uses SIGKILL)</span><br><span class="line">    ‐l, ‐‐link 删除指定的链接</span><br><span class="line">    ‐v, ‐‐volumes 删除与容器关联的卷</span><br></pre></td></tr></table></figure><h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker logs [OPTIONS] CONTAINER</span><br><span class="line">Fetch the logs of a container</span><br><span class="line">Options:</span><br><span class="line">        ‐‐details 向日志显示额外的详细信息。</span><br><span class="line">    ‐f, ‐‐follow  跟踪日志输出</span><br><span class="line">        ‐‐since string 显示某个开始时间的所有日志 (e.g. 2013‐01‐02T13:23:37) or relative</span><br><span class="line">        (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br><span class="line">        ‐‐tail string 从日志末尾显示的行数</span><br><span class="line">        (default <span class="string">"all"</span>)</span><br><span class="line">    ‐t, ‐‐timestamps 显示时间戳</span><br><span class="line">        ‐‐until string 显示某个时间戳之前的日志 (e.g. 2013‐01‐02T13:23:37) or relative</span><br><span class="line">    (e.g. 42m <span class="keyword">for</span> 42 minutes)</span><br></pre></td></tr></table></figure><ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs -t -f --tail=500 PID</span><br></pre></td></tr></table></figure><h2 id="查看容器内的进程"><a href="#查看容器内的进程" class="headerlink" title="查看容器内的进程"></a>查看容器内的进程</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">sudo docker top name/id</span><br></pre></td></tr></table></figure><h2 id="深入容器信息"><a href="#深入容器信息" class="headerlink" title="深入容器信息"></a>深入容器信息</h2><p>包括配置信息，名称，命令、网路配置以及很多有用数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Usage: docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br><span class="line">Return low‐level information on Docker objects</span><br><span class="line">Options:</span><br><span class="line">    ‐f, ‐‐format string 使用给定的Go模板格式化输出</span><br><span class="line">    ‐s, ‐‐size 如果类型为容器，则显示总文件大小</span><br><span class="line">        ‐‐<span class="built_in">type</span> string 返回指定类型的JSON</span><br></pre></td></tr></table></figure></p><ul><li>示例</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 首先获取容器的pid</span></span><br><span class="line">docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> 容器名</span><br><span class="line"><span class="comment">## 根据进程号进入挂载</span></span><br><span class="line">nsenter --target 进程号(Pid) --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><h3 id="查看网络配置"><a href="#查看网络配置" class="headerlink" title="查看网络配置"></a>查看网络配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect ‐‐format <span class="string">'&#123;&#123;.NetworkSettings&#125;&#125;'</span> 容器ID</span><br></pre></td></tr></table></figure><h3 id="查看容器IP地址"><a href="#查看容器IP地址" class="headerlink" title="查看容器IP地址"></a>查看容器IP地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect ‐‐format <span class="string">'&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;'</span> 容器ID</span><br></pre></td></tr></table></figure><h3 id="查看所有容器的IP地址"><a href="#查看所有容器的IP地址" class="headerlink" title="查看所有容器的IP地址"></a>查看所有容器的IP地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker inspect ‐‐format=<span class="string">'&#123;&#123;.Name&#125;&#125; ‐ &#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123;end&#125;&#125;'</span> $(docker ps ‐aq)</span><br></pre></td></tr></table></figure><h1 id="Docker容器进入的4种方式"><a href="#Docker容器进入的4种方式" class="headerlink" title="Docker容器进入的4种方式"></a>Docker容器进入的4种方式</h1><h2 id="SSH登陆进容器"><a href="#SSH登陆进容器" class="headerlink" title="SSH登陆进容器"></a>SSH登陆进容器</h2><ul><li>方法1：需要在容器中启动sshd，存在开销和攻击面增大的问题。同时也违反了Docker所倡导的一个容器一个进程<br>的原则。</li><li>方法2：需要额外学习使用第三方工具。</li></ul><h2 id="nsenter、nsinit等第三方工具"><a href="#nsenter、nsinit等第三方工具" class="headerlink" title="nsenter、nsinit等第三方工具"></a>nsenter、nsinit等第三方工具</h2><p>所以大多数情况最好还是使用Docker原生方法，Docker目前主要提供了<code>docker exec</code>和<code>docker attach</code>两个命<br>令。</p><h2 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h2><p>Docker attach可以attach到一个已经运行的容器的<code>stdin</code>，然后进行命令执行的动作。<br>但是需要注意的是，如果从这个<code>stdin</code>中<code>exit</code>，会<code>导致容器停止</code>。</p><ol><li><p>必须使用<code>/bin/bash</code>命令创建的容器才能使用Docker attach进入容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run ‐itd ubuntu:14.04 /bin/bash</span><br></pre></td></tr></table></figure></li><li><p>然后我们使用<code>docker ps</code>查看到该容器信息，接下来就使用<code>docker attach</code>进入该容器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker attach 44fc0f0582d9</span><br></pre></td></tr></table></figure></li></ol><h2 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h2><p>关于-i、-t参数</p><ul><li>-i<br>可以看出只用-i时，由于没有分配伪终端，看起来像pipe执行一样。但是执行结果、命令返回值都可以正确<br>获取。</li><li>-it<br>  使用-it时，则和我们平常操作console界面类似。而且也不会像<code>attach</code>方式因为退出，导致整个容器退出。<br>这种方式可以替代<code>ssh</code>或者<code>nsenter</code>、<code>nsinit</code>方式，在容器内进行操作。</li><li>-t<br>  如果只使用-t参数，则可以看到一个console窗口，但是执行命令会发现由于没有获得stdin的输出，无法看<br>到命令执行情况。<br>关于-d参数</li><li>-d<br>  在后台执行一个进程。可以看出，如果一个命令需要长时间进程，使用-d参数会很快返回。 程序在后台运<br>行。 如果不使用<code>-d</code>参数，由于命令需要长时间执行，<code>docker exec</code>会卡住，一直等命令执行完成 才返回。</li></ul><p>使用<code>docker exec</code>进入容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> ‐it 775c7c9ee1e1 /bin/bash</span><br></pre></td></tr></table></figure></p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="停止容器-amp-删除容器所有容器-慎用"><a href="#停止容器-amp-删除容器所有容器-慎用" class="headerlink" title="停止容器 &amp; 删除容器所有容器 (慎用)"></a>停止容器 &amp; 删除容器所有容器 (慎用)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br></pre></td></tr></table></figure><h2 id="清除坏的-lt-none-gt-lt-none-gt-镜像"><a href="#清除坏的-lt-none-gt-lt-none-gt-镜像" class="headerlink" title="清除坏的&lt;none&gt;:&lt;none&gt;镜像"></a>清除坏的<code>&lt;none&gt;:&lt;none&gt;</code>镜像</h2><ul><li>坏的镜像的产生<br><code>docker build</code> 或是 <code>pull</code> 命令就会产生临时镜像。如果我们用<code>dockerfile</code>创建一个helloworld镜像后，因为版本更新需要重新创建，那么以前那个版本的镜像就会<br>成为临时镜像。这个是需要删除的。删除命令见下。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -f <span class="string">"dangling=true"</span> -q)</span><br></pre></td></tr></table></figure></li></ul><h2 id="快速进入容器脚本"><a href="#快速进入容器脚本" class="headerlink" title="快速进入容器脚本"></a>快速进入容器脚本</h2><ul><li>创建脚本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim in.sh</span><br></pre></td></tr></table></figure><ul><li>内容如下</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CNAME=<span class="variable">$1</span></span><br><span class="line">CPID=$(docker inspect --format <span class="string">"&#123;&#123;.State.Pid&#125;&#125;"</span> <span class="variable">$CNAME</span>)</span><br><span class="line">nsenter --target <span class="string">"<span class="variable">$CPID</span>"</span> --mount --uts --ipc --net --pid</span><br></pre></td></tr></table></figure><ul><li>使用方式</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./in.sh mynginx</span><br></pre></td></tr></table></figure><h2 id="容器开机自动启动"><a href="#容器开机自动启动" class="headerlink" title="容器开机自动启动"></a>容器开机自动启动</h2><p>在使用<code>docker run</code>启动容器时，使用<code>–restart</code>参数来设置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run ‐m 512m ‐‐memory‐swap 1G ‐it ‐p 58080:8080 ‐‐restart=always ‐‐name bvrfis ‐‐</span><br><span class="line">volumes‐from logdata mytomcat:4.0 /root/run.sh</span><br></pre></td></tr></table></figure></p><ul><li>命令说明：<br>  –restart具体参数值详细信息：<br>  no - 容器退出时，不重启容器；<br>  on-failure - 只有在非0状态退出时才从新启动容器；<br>  always - 无论退出状态是如何，都重启容器。</li></ul><p>如果创建时未指定 <code>–restart=always</code> ,可通过<code>update</code> 命令设置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker update ‐‐restart=always xxx</span><br></pre></td></tr></table></figure></p><p>还可以在使用 <code>on-failure</code> 策略时，指定Docker将尝试重新启动容器的最大次数。默认情况下，Docker将尝试永远重新<br>启动容器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run ‐‐restart=on‐failure:10 redis</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIT初始化仓库</title>
      <link href="//posts/b3ff4f99.html"/>
      <url>//posts/b3ff4f99.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令行指令"><a href="#命令行指令" class="headerlink" title="命令行指令"></a>命令行指令</h2><h3 id="Git-全局设置"><a href="#Git-全局设置" class="headerlink" title="Git 全局设置"></a>Git 全局设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;名称&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><h3 id="创建新版本库"><a href="#创建新版本库" class="headerlink" title="创建新版本库"></a>创建新版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone git@172.16.200.102:dev1/sims-ui.git</span><br><span class="line">cd sims-ui</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;add README&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="已存在的文件夹"><a href="#已存在的文件夹" class="headerlink" title="已存在的文件夹"></a>已存在的文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin git@172.16.200.102:dev1/sims-ui.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h3 id="已存在的-Git-版本库"><a href="#已存在的-Git-版本库" class="headerlink" title="已存在的 Git 版本库"></a>已存在的 Git 版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd existing_repo</span><br><span class="line">git remote rename origin old-origin</span><br><span class="line">git remote add origin git@172.16.200.102:dev1/sims-ui.git</span><br><span class="line">git push -u origin --all</span><br><span class="line">git push -u origin --tags</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>系统功能页面乱码问题解决过程</title>
      <link href="//posts/e910f696.html"/>
      <url>//posts/e910f696.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下对浏览器加载资源文件的时候, 或出现乱码情况的时候, 对解决过程进行记录， 如有以下情况的同学可以借鉴参考；</p></blockquote><a id="more"></a><h2 id="情况一"><a href="#情况一" class="headerlink" title="情况一"></a>情况一</h2><ul><li><p>问题描述:<br>应用资源文件编码不正确， 导致最终浏览器编码</p></li><li><p>解决过程:<br>找到对应乱码的<code>html</code>或者<code>js</code>文件, 将文件编码保存为应用统一的编码即可；</p></li></ul><h2 id="情况二"><a href="#情况二" class="headerlink" title="情况二"></a>情况二</h2><ul><li>问题描述:<br>js的文件编码为应用统一的标准编码(如GBK), 但是浏览器展现还是为乱码, 如下图:</li></ul><p>js资源文件编码为<code>GBK</code><br><img src="http://qiniu-pic.siven.net/blog/2018-03-15-034645.png" alt></p><p>浏览器加载的<code>JS</code>资源文件为乱码<br><img src="http://qiniu-pic.siven.net/blog/2018-03-15-034744.png" alt></p><ul><li>解决方法:<br>一般这种情况有两种可能    </li></ul><ol><li>浏览器缓存了之前编码不正确的资源文件, 删除浏览器缓存即可;</li><li>检查HTML引入<code>JS</code>资源的时候, 指定了<code>JS</code>资源的编码<code>charset=&quot;utf-8&quot;</code>,但资源文件实际编码为<code>GBK</code>, 最终导致浏览器展示乱码, 如下图:<br><img src="http://qiniu-pic.siven.net/blog/2018-03-15-034931.png" alt><br>解决办法亦是将<code>charset</code>指定为正确的编码或删掉即可</li></ol><h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><p>当然乱码的情况还有很多种,什么提交数据乱码诸如此类,这些问题就应该在代码层面去保障了, 对提交的参数进行<code>encoding</code>编码, 后台接收数据对参数进行解码操作等, 但是对于文件本身就存在编码不正确乱码的问题可以参考上面的情况去解决。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ集群搭建</title>
      <link href="//posts/d91bf2fe.html"/>
      <url>//posts/d91bf2fe.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>推荐的几种<code>Broker</code>集群部署方式，这里的<code>Slave</code>不可写，但可读，类似于 Mysql主备方式。</p><h2 id="多Master模式（2m-noslave）"><a href="#多Master模式（2m-noslave）" class="headerlink" title="多Master模式（2m-noslave）"></a>多Master模式（2m-noslave）</h2><p>一个集群无Slave，全是Master，例如2个Master或者3个Master</p><ul><li>优点：配置简单，单个Master宕机或重启维护对应用无影响，在磁盘配置为RAID10时，即使机器宕机不可恢复情况下，由于RAID10磁盘非常可靠，消息也不会丢（异步刷盘丢失少量消息，同步刷盘一条不丢）。性能最高。</li><li>缺点：单台机器宕机期间，这台机器上未被消费的消息在机器恢复之前不可订阅，消息实时性会受到受到影响。</li></ul><a id="more"></a><h2 id="多Master多Slave模式，异步复制（2m-2s-async）"><a href="#多Master多Slave模式，异步复制（2m-2s-async）" class="headerlink" title="多Master多Slave模式，异步复制（2m-2s-async）"></a>多Master多Slave模式，异步复制（2m-2s-async）</h2><p>每个Master配置一个Slave，有多对Master-Slave，HA采用异步复制方式，主备有短暂消息延迟，毫秒级。</p><ul><li>优点：即使磁盘损坏，消息丢失的非常少，且消息实时性不会受影响，因为Master宕机后，消费者仍然可以从Slave消费，此过程对应用透明。不需要人工干预。性能同多Master模式几乎一样。</li><li>缺点：Master宕机，磁盘损坏情况，会丢失少量消息。</li></ul><h2 id="多Master多Slave模式，同步双写（2m-noslave）"><a href="#多Master多Slave模式，同步双写（2m-noslave）" class="headerlink" title="多Master多Slave模式，同步双写（2m-noslave）"></a>多Master多Slave模式，同步双写（2m-noslave）</h2><p>每个Master配置一个Slave，有多对Master-Slave，HA采用同步双写方式，主备都写成功，向应用返回成功。</p><ul><li>优点：数据与服务都无单点，Master宕机情况下，消息无延迟，服务可用性与数据可用性都非常高</li><li>缺点：性能比异步复制模式略低，大约低10%左右，发送单个消息的RT会略高。目前主宕机后，备机不能自动切换为主机，后续会支持自动切换功能。</li></ul><h1 id="集群部署"><a href="#集群部署" class="headerlink" title="集群部署"></a>集群部署</h1><h2 id="多Master模式搭建"><a href="#多Master模式搭建" class="headerlink" title="多Master模式搭建"></a>多Master模式搭建</h2><h3 id="总体架构"><a href="#总体架构" class="headerlink" title="总体架构"></a>总体架构</h3><p><img src="http://qiniu-pic.siven.net/blog/2018-02-09-094447.png" alt></p><h3 id="服务器环境"><a href="#服务器环境" class="headerlink" title="服务器环境"></a>服务器环境</h3><table><thead><tr><th>序号</th><th>IP</th><th>角色</th><th>架构模式</th></tr></thead><tbody><tr><td>1</td><td>10.211.55.14</td><td>nameserver、brokerserver</td><td>Master1（双Master模式）</td></tr><tr><td>2</td><td>10.211.55.15</td><td>nameserver、brokerserver</td><td>Master2（双Master模式）</td></tr></tbody></table><hr><blockquote><p><strong>注:</strong> 以下配置需要同时在以上两台服务器中进行</p></blockquote><h3 id="Hosts添加信息"><a href="#Hosts添加信息" class="headerlink" title="Hosts添加信息"></a>Hosts添加信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p>配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># rocketmq hosts</span><br><span class="line">10.211.55.14 rocketmq-nameserver1</span><br><span class="line">10.211.55.14 rocketmq-master1</span><br><span class="line">10.211.55.15 rocketmq-nameserver2</span><br><span class="line">10.211.55.15 rocketmq-master2</span><br></pre></td></tr></table></figure></p><p>配置完成后, 重启网卡<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></p><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>宿主机需要远程访问虚拟机的rocketmq服务和web服务，需要开放相关的端口号，简单粗暴的方式是直接关闭防火墙<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关闭防火墙</span></span><br><span class="line">service iptables stop </span><br><span class="line"><span class="comment"># 查看防火墙的状态</span></span><br><span class="line">service iptables status </span><br><span class="line"><span class="comment"># 启动防火墙</span></span><br><span class="line">service iptables start</span><br></pre></td></tr></table></figure></p><p>或者为了安全，只开放特定的端口号，RocketMQ默认使用3个端口：9876 、10911、10912。如果防火墙没有关闭的话，那么防火墙就必须开放这些端口：</p><ul><li><code>name server</code> 默认使用 9876 端口</li><li><code>master</code> 默认使用 10911 端口</li><li><code>slave</code> 默认使用10912 端口 (当前集群模式可不开启)</li></ul><p>执行以下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开放name server默认端口</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 9876 -j ACCEPT  </span><br><span class="line"><span class="comment"># 开放master默认端口</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 10911 -j ACCEPT  </span><br><span class="line"><span class="comment"># 开放slave默认端口 (当前集群模式可不开启)</span></span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 10912 -j ACCEPT  </span><br><span class="line"><span class="comment"># 保存配置</span></span><br><span class="line">service iptables save  </span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></p><h3 id="下载并解压"><a href="#下载并解压" class="headerlink" title="下载并解压"></a>下载并解压</h3><p>RocketMQ官网: <a href="http://rocketmq.apache.org/" target="_blank" rel="noopener">http://rocketmq.apache.org/</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirror.bit.edu.cn/apache/rocketmq/4.2.0/rocketmq-all-4.2.0-bin-release.zip</span><br><span class="line">unzip rocketmq-all-4.2.0-bin-release.zip</span><br><span class="line">mv rocketmq-all-4 /usr/<span class="built_in">local</span>/rocketmq</span><br></pre></td></tr></table></figure></p><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在profile文件的末尾加入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#set rocketmq</span></span><br><span class="line">ROCKETMQ_HOME=/usr/<span class="built_in">local</span>/rocketmq</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$ROCKETMQ_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> ROCKETMQ_HOME PATH</span><br></pre></td></tr></table></figure></p><p>输入:wq! 保存并退出， 并使得配置立刻生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure></p><h3 id="创建存储路径"><a href="#创建存储路径" class="headerlink" title="创建存储路径"></a>创建存储路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/commitlog</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/consumequeue</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/index</span><br></pre></td></tr></table></figure><h3 id="RocketMQ配置文件"><a href="#RocketMQ配置文件" class="headerlink" title="RocketMQ配置文件"></a>RocketMQ配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/rocketmq/conf/2m-noslave/broker-a.properties</span><br><span class="line">vim /usr/<span class="built_in">local</span>/rocketmq/conf/2m-noslave/broker-b.properties</span><br></pre></td></tr></table></figure><p>修改配置如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#所属集群名字</span><br><span class="line">brokerClusterName=rocketmq-cluster</span><br><span class="line">#broker名字，注意此处不同的配置文件填写的不一样</span><br><span class="line">brokerName=broker-a|broker-b</span><br><span class="line">#0 表示 Master，&gt;0 表示 Slave</span><br><span class="line">brokerId=0</span><br><span class="line">#nameServer地址，分号分割</span><br><span class="line">namesrvAddr=rocketmq-nameserver1:9876;rocketmq-nameserver2:9876</span><br><span class="line">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数</span><br><span class="line">defaultTopicQueueNums=4</span><br><span class="line">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span><br><span class="line">autoCreateTopicEnable=true</span><br><span class="line">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span><br><span class="line">autoCreateSubscriptionGroup=true</span><br><span class="line">#Broker 对外服务的监听端口</span><br><span class="line">listenPort=10911</span><br><span class="line">#删除文件时间点，默认凌晨 4点</span><br><span class="line">deleteWhen=04</span><br><span class="line">#文件保留时间，默认 48 小时</span><br><span class="line">fileReservedTime=120</span><br><span class="line">#commitLog每个文件的大小默认1G</span><br><span class="line">mapedFileSizeCommitLog=1073741824</span><br><span class="line">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span><br><span class="line">mapedFileSizeConsumeQueue=300000</span><br><span class="line">#destroyMapedFileIntervalForcibly=120000</span><br><span class="line">#redeleteHangedFileInterval=120000</span><br><span class="line">#检测物理文件磁盘空间</span><br><span class="line">diskMaxUsedSpaceRatio=88</span><br><span class="line">#存储路径</span><br><span class="line">storePathRootDir=/usr/local/rocketmq/store</span><br><span class="line">#commitLog 存储路径</span><br><span class="line">storePathCommitLog=/usr/local/rocketmq/store/commitlog</span><br><span class="line">#消费队列存储路径存储路径</span><br><span class="line">storePathConsumeQueue=/usr/local/rocketmq/store/consumequeue</span><br><span class="line">#消息索引存储路径</span><br><span class="line">storePathIndex=/usr/local/rocketmq/store/index</span><br><span class="line">#checkpoint 文件存储路径</span><br><span class="line">storeCheckpoint=/usr/local/rocketmq/store/checkpoint</span><br><span class="line">#abort 文件存储路径</span><br><span class="line">abortFile=/usr/local/rocketmq/store/abort</span><br><span class="line">#限制的消息大小</span><br><span class="line">maxMessageSize=65536</span><br><span class="line">#flushCommitLogLeastPages=4</span><br><span class="line">#flushConsumeQueueLeastPages=2</span><br><span class="line">#flushCommitLogThoroughInterval=10000</span><br><span class="line">#flushConsumeQueueThoroughInterval=60000</span><br><span class="line">#Broker 的角色</span><br><span class="line">#- ASYNC_MASTER 异步复制Master</span><br><span class="line">#- SYNC_MASTER 同步双写Master</span><br><span class="line">#- SLAVE</span><br><span class="line">brokerRole=ASYNC_MASTER</span><br><span class="line">#刷盘方式</span><br><span class="line">#- ASYNC_FLUSH 异步刷盘</span><br><span class="line">#- SYNC_FLUSH 同步刷盘</span><br><span class="line">flushDiskType=ASYNC_FLUSH</span><br><span class="line">#checkTransactionMessageEnable=false</span><br><span class="line">#发消息线程池数量</span><br><span class="line">#sendMessageThreadPoolNums=128</span><br><span class="line">#拉消息线程池数量</span><br><span class="line">#pullMessageThreadPoolNums=128</span><br></pre></td></tr></table></figure></p><h3 id="修改日志配置文件"><a href="#修改日志配置文件" class="headerlink" title="修改日志配置文件"></a>修改日志配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/<span class="built_in">local</span>/rocketmq/logs</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/conf &amp;&amp; sed -i <span class="string">'s#$&#123;user.home&#125;#/usr/local/rocketmq#g'</span> *.xml</span><br></pre></td></tr></table></figure><h3 id="修改启动脚本参数"><a href="#修改启动脚本参数" class="headerlink" title="修改启动脚本参数"></a>修改启动脚本参数</h3><h4 id="runbroker-sh"><a href="#runbroker-sh" class="headerlink" title="runbroker.sh"></a>runbroker.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/rocketmq/bin/runbroker.sh</span><br></pre></td></tr></table></figure><p>需要根据内存大小进行适当的对JVM参数进行调整：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#===========================================================================================</span><br><span class="line"># 开发环境配置 JVM Configuration</span><br><span class="line">#===========================================================================================</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn512m&quot;</span><br></pre></td></tr></table></figure></p><p>本机为虚拟机，就设置小点，1-2g内存，如下：<br><img src="http://qiniu-pic.siven.net/blog/2018-02-09-083045.png" alt></p><h4 id="runserver-sh"><a href="#runserver-sh" class="headerlink" title="runserver.sh"></a>runserver.sh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/rocketmq/bin/runserver.sh</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#===========================================================================================</span><br><span class="line"># 开发环境配置 JVM Configuration</span><br><span class="line">#===========================================================================================</span><br><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms1g -Xmx1g -Xmn512g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></pre></td></tr></table></figure><p><img src="http://qiniu-pic.siven.net/blog/2018-02-09-083329.png" alt></p><h3 id="服务启动"><a href="#服务启动" class="headerlink" title="服务启动"></a>服务启动</h3><h4 id="启动NameServer-master1、master2"><a href="#启动NameServer-master1、master2" class="headerlink" title="启动NameServer (master1、master2)"></a>启动NameServer (master1、master2)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">nohup sh mqnamesrv &amp;</span><br></pre></td></tr></table></figure><h4 id="启动BrokerServer-A-master1"><a href="#启动BrokerServer-A-master1" class="headerlink" title="启动BrokerServer A (master1)"></a>启动BrokerServer A (master1)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">nohup sh mqbroker -c /usr/<span class="built_in">local</span>/rocketmq/conf/2m-noslave/broker-a.properties &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h4 id="启动BrokerServer-B-master2"><a href="#启动BrokerServer-B-master2" class="headerlink" title="启动BrokerServer B (master2)"></a>启动BrokerServer B (master2)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">nohup sh mqbroker -c /usr/<span class="built_in">local</span>/rocketmq/conf/2m-noslave/broker-b.properties &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p><strong>注：</strong> 在master2上的名称为<code>broker-b.properties</code></p><h4 id="查看进程状态"><a href="#查看进程状态" class="headerlink" title="查看进程状态"></a>查看进程状态</h4><ul><li><p>jps<br><img src="http://qiniu-pic.siven.net/blog/2018-02-09-095032.png" alt></p></li><li><p>netstat -ntlp<br><img src="http://qiniu-pic.siven.net/blog/2018-02-09-095002.png" alt></p></li></ul><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看nameServer日志</span></span><br><span class="line">tail -500f /usr/<span class="built_in">local</span>/rocketmq/logs/rocketmqlogs/namesrv.log</span><br><span class="line"><span class="comment"># 查看broker日志</span></span><br><span class="line">tail -500f /usr/<span class="built_in">local</span>/rocketmq/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure><h3 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/rocketmq/bin</span><br><span class="line">sh mqshutdown broker</span><br><span class="line">sh mqshutdown namesrv</span><br><span class="line"><span class="comment"># --等待停止</span></span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/rocketmq/store</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/commitlog</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/consumequeue</span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/rocketmq/store/index</span><br><span class="line"><span class="comment"># --按照上面步骤重启NameServer与BrokerServer</span></span><br></pre></td></tr></table></figure><h1 id="RocketMQ-Console-监控平台"><a href="#RocketMQ-Console-监控平台" class="headerlink" title="RocketMQ Console (监控平台)"></a>RocketMQ Console (监控平台)</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>RocketMQ</code>有一个对其扩展的开源项目<a href="https://github.com/apache/rocketmq-externals" target="_blank" rel="noopener">incubator-rocketmq-externals</a>，这个项目中有一个子模块叫<code>rocketmq-console</code>，这个便是管理控制台项目了，先将<a href="https://github.com/apache/rocketmq-externals" target="_blank" rel="noopener">incubator-rocketmq-externals</a>拉到本地，因为我们需要自己对<code>rocketmq-console</code>进行编译打包运行。</p><p><img src="http://qiniu-pic.siven.net/blog/2018-02-09-084750.png" alt></p><h2 id="下载并编译"><a href="#下载并编译" class="headerlink" title="下载并编译"></a>下载并编译</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/apache/rocketmq-externals</span><br><span class="line"><span class="built_in">cd</span> rocketmq-console</span><br><span class="line">mvn clean package -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如下图：<br><img src="http://qiniu-pic.siven.net/blog/2018-02-09-084620.png" alt></p><p>此时在<code>rocketmq-console/target</code>目录下生成了一个叫<code>rocketmq-console-ng-1.0.0.jar</code>的jar包，如下图：</p><p><img src="http://qiniu-pic.siven.net/blog/2018-02-09-084727.png" alt></p><h2 id="启动运行"><a href="#启动运行" class="headerlink" title="启动运行"></a>启动运行</h2><p>在启动之前, 需要在目标的RocketMQ集群应用服务器或开放端口10909端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># fastListenPort 主要是fastRemotingServer服务使用</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 10909 -j ACCEPT  </span><br><span class="line"># 保存配置</span><br><span class="line">service iptables save  </span><br><span class="line"># 重启防火墙</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></p><p>启动rocketmq-console：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar rocketmq-console-ng-1.0.0.jar --server.port=8080 --rocketmq.config.namesrvAddr=10.211.55.14:9876;10.211.55.15:9876</span><br></pre></td></tr></table></figure></p><p>这里注意需要设置两个参数：<code>--server.port</code>为运行的这个web应用的端口，如果不设置的话默认为<code>8080</code>；<code>--rocketmq.config.namesrvAddr</code>为RocketMQ命名服务地址，如果不设置的话默认为“”。或者修改<code>rocketmq-console-ng-1.0.0.jar</code>文件，找到配置文件application.properties，并按照自己需求进行配置。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rocketmq.config.namesrvAddr=namesrv服务地址（ip1：port;ip2:port）</span><br></pre></td></tr></table></figure></p><p>配置好之后, 就不需要指定<code>--rocketmq.config.namesrvAddr</code>参数</p><p>启动成功后，我们就可以通过浏览器访问<code>http://localhost:8080</code>进入控制台界面了，如下图：<br><img src="http://qiniu-pic.siven.net/blog/2018-02-09-092909.png" alt></p><p>集群节点:<br><img src="http://qiniu-pic.siven.net/blog/2018-02-09-093021.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> RocketMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RocketMQ </tag>
            
            <tag> Cluster </tag>
            
            <tag> rocketmq-console </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Future模式：Callable、Future和FutureTask浅析</title>
      <link href="//posts/b1cdc354.html"/>
      <url>//posts/b1cdc354.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Java中一般通过继承<code>Thread</code>类或者实现<code>Runnable</code>接口这两种方式来创建多线程，但是这两种方式都有个缺陷，就是不能在执行完成后获取执行的结果，因此Java 1.5之后提供了<code>Callable</code>和<code>Future</code>接口，通过它们就可以在任务执行完毕之后得到任务的执行结果。本文会简要的介绍使用方法，然后会从源代码角度分析下具体的实现原理。<br><img src="http://qiniu-pic.siven.net/blog/2018-01-31-080956.png" alt></p><a id="more"></a><h1 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable<v>接口</v></h1><p>对于需要执行的任务需要实现<code>Callable</code>接口，<code>Callable</code>接口定义如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> computed result</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception if unable to compute a result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到<code>Callable</code>是个泛型接口，泛型V就是要<code>call()</code>方法返回的类型。<code>Callable</code>接口和<code>Runnable</code>接口很像，都可以被另外一个线程执行，但是正如前面所说的，<code>Runnable</code>不会返回数据也不能抛出异常。</p><h1 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future<v>接口</v></h1><p><code>Future</code>接口代表异步计算的结果，通过<code>Future</code>接口提供的方法可以查看异步计算是否执行完成，或者等待执行结果并获取执行结果，同时还可以取消执行。<code>Future</code>接口的定义如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法解析：</p><ul><li>cancel():用来取消异步任务的执行。如果异步任务已经完成或者已经被取消，或者由于某些原因不能取消，则会返回false。如果任务还没有被执行，则会返回true并且异步任务不会被执行。如果任务已经开始执行了但是还没有执行完成，若mayInterruptIfRunning为true，则会立即中断执行任务的线程并返回true，若mayInterruptIfRunning为false，则会返回true且不会中断任务执行线程。</li><li>isCanceled():判断任务是否被取消，如果任务在结束(正常执行结束或者执行异常结束)前被取消则返回true，否则返回false。</li><li>isDone():判断任务是否已经完成，如果完成则返回true，否则返回false。需要注意的是：任务执行过程中发生异常、任务被取消也属于任务已完成，也会返回true。</li><li>get():获取任务执行结果，如果任务还没完成则会阻塞等待直到任务执行完成。如果任务被取消则会抛出CancellationException异常，如果任务执行过程发生异常则会抛出ExecutionException异常，如果阻塞等待过程中被中断则会抛出InterruptedException异常。</li><li>get(long timeout,Timeunit unit):带超时时间的get()版本，如果阻塞等待过程中超时则会抛出TimeoutException异常。</li></ul><h1 id="FutureTask实现类"><a href="#FutureTask实现类" class="headerlink" title="FutureTask实现类"></a>FutureTask实现类</h1><p><code>Future</code>只是一个接口，不能直接用来创建对象，<code>FutureTask</code>是<code>Future</code>的实现类，<code>FutureTask</code>的继承图如下:<br><img src="http://qiniu-pic.siven.net/blog/2018-01-31-073411.png" alt><br>可以看到,<code>FutureTask</code>实现了<code>RunnableFuture</code>接口，则<code>RunnableFuture</code>接口继承了<code>Runnable</code>接口和<code>Future</code>接口，所以<code>FutureTask</code>既能当做一个<code>Runnable</code>直接被<code>Thread</code>执行，也能作为<code>Future</code>用来得到<code>Callable</code>的计算结果。</p><h1 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h1><p><code>FutureTask</code>一般配合<code>ExecutorService</code>来使用，也可以直接通过<code>Thread</code>来使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseFuture</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第一种方式:Future + ExecutorService</span></span><br><span class="line"><span class="comment">         * Task task = new Task();</span></span><br><span class="line"><span class="comment">         * ExecutorService service = Executors.newCachedThreadPool();</span></span><br><span class="line"><span class="comment">         * Future&lt;Integer&gt; future = service.submit(task1);</span></span><br><span class="line"><span class="comment">         * service.shutdown();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第二种方式: FutureTask + ExecutorService</span></span><br><span class="line"><span class="comment">         * ExecutorService executor = Executors.newCachedThreadPool();</span></span><br><span class="line"><span class="comment">         * Task task = new Task();</span></span><br><span class="line"><span class="comment">         * FutureTask&lt;Integer&gt; futureTask = new FutureTask&lt;Integer&gt;(task);</span></span><br><span class="line"><span class="comment">         * executor.submit(futureTask);</span></span><br><span class="line"><span class="comment">         * executor.shutdown();</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 第三种方式:FutureTask + Thread</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 2. 新建FutureTask,需要一个实现了Callable接口的类的实例作为构造函数参数</span></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;Integer&gt;(<span class="keyword">new</span> Task());</span><br><span class="line">        <span class="comment">// 3. 新建Thread对象并启动</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        thread.setName(<span class="string">"Task thread"</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"Thread ["</span> + Thread.currentThread().getName() + <span class="string">"] is running"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 调用isDone()判断任务是否结束</span></span><br><span class="line">        <span class="keyword">if</span> (!futureTask.isDone()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Task is not done"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 5. 调用get()方法获取任务结果,如果任务没有执行完成则阻塞等待</span></span><br><span class="line">            result = futureTask.get();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"result is "</span> + result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 继承Callable接口,实现call()方法,泛型参数为要返回的类型</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread ["</span> + Thread.currentThread().getName() + <span class="string">"] is running"</span>);</span><br><span class="line">            <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i) &#123;</span><br><span class="line">                result += i;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread [Task thread] is running</span><br><span class="line">Thread [main] is running</span><br><span class="line">Task is not done</span><br><span class="line">result is 4950</span><br></pre></td></tr></table></figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>FutureTask</code>的实现还是比较简单的，当用户实现<code>Callable</code>接口定义好任务之后，把任务交给其他线程进行执行。FutureTask内部维护一个任务状态，任何操作都是围绕着这个状态进行，并随时更新任务状态。任务发起者调用get*()获取执行结果的时候，如果任务还没有执行完毕，则会把自己放入阻塞队列中然后进行阻塞等待。当任务执行完成之后，任务执行线程会依次唤醒阻塞等待的线程。调用cancel()取消任务的时候也只是简单的修改任务状态，如果需要中断任务执行线程的话则调用Thread.interrupt()中断任务执行线程。</p><hr><blockquote><p>参考文章<br><a href="http://www.importnew.com/25286.html" target="_blank" rel="noopener">深入学习 FutureTask</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发模型（二）——Master-Worker模式</title>
      <link href="//posts/7d7b0ef9.html"/>
      <url>//posts/7d7b0ef9.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Master-Worker</code>模式是常用的并行模式之一，它的核心思想是，系统有两个进程协作工作：<code>Master</code>进程，负责接收和分配任务；<code>Worker</code>进程，负责处理子任务。当<code>Worker</code>进程将子任务处理完成后，结果返回给<code>Master</code>进程，由<code>Master</code>进程做归纳汇总，最后得到最终的结果。</p><a id="more"></a><h1 id="什么是Master-Worker模式"><a href="#什么是Master-Worker模式" class="headerlink" title="什么是Master-Worker模式"></a>什么是Master-Worker模式</h1><p>该模式的结构图:<br><img src="http://qiniu-pic.siven.net/blog/2018-01-19-071423.jpg" alt></p><p>结构图<br><img src="http://qiniu-pic.siven.net/blog/2018-01-19-071441.jpg" alt></p><ul><li><code>Worker</code>：用于实际处理一个任务；</li><li><code>Master</code>：任务的分配和最终结果的合成；</li><li><code>Main</code>：启动程序，调度开启Master。</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>下面的是一个简易的Master-Worker框架实现。</p><h2 id="定义一个Task"><a href="#定义一个Task" class="headerlink" title="定义一个Task"></a>定义一个Task</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Master的实现"><a href="#Master的实现" class="headerlink" title="Master的实现"></a>Master的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Master</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1 有一个盛放任务的容器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentLinkedQueue&lt;Task&gt; workQueue = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2 需要有一个盛放worker的集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String, Thread&gt; workers = <span class="keyword">new</span> HashMap&lt;String, Thread&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3 需要有一个盛放每一个worker执行任务的结果集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; resultMap = <span class="keyword">new</span> ConcurrentHashMap&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4 Master的构造，需要一个Worker进程逻辑，和需要Worker进程数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> worker      进程逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerCount 进程数量</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Master</span><span class="params">(Worker worker, <span class="keyword">int</span> workerCount)</span> </span>&#123;</span><br><span class="line">        worker.setWorkQueue(<span class="keyword">this</span>.workQueue);</span><br><span class="line">        worker.setResultMap(<span class="keyword">this</span>.resultMap);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; workerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.workers.put(Integer.toString(i), <span class="keyword">new</span> Thread(worker));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5 需要一个提交任务的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(Task task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.workQueue.add(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 6 需要有一个执行的方法，启动所有的worker方法去执行任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Thread&gt; me : workers.entrySet()) &#123;</span><br><span class="line">            me.getValue().start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 7 判断是否运行结束的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Thread&gt; me : workers.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (me.getValue().getState() != Thread.State.TERMINATED) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 8 计算结果方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> priceResult = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; me : resultMap.entrySet()) &#123;</span><br><span class="line">            priceResult += (Integer) me.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> priceResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Worker的实现"><a href="#Worker的实现" class="headerlink" title="Worker的实现"></a>Worker的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  任务队列，用于取得子任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentLinkedQueue&lt;Task&gt; workQueue;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子任务处理结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ConcurrentHashMap&lt;String, Object&gt; resultMap;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkQueue</span><span class="params">(ConcurrentLinkedQueue&lt;Task&gt; workQueue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResultMap</span><span class="params">(ConcurrentHashMap&lt;String, Object&gt; resultMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.resultMap = resultMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//获取子任务</span></span><br><span class="line">            Task input = <span class="keyword">this</span>.workQueue.poll();</span><br><span class="line">            <span class="keyword">if</span> (input == <span class="keyword">null</span>) <span class="keyword">break</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//处理子任务</span></span><br><span class="line">            Object output = handle(input);</span><br><span class="line">            <span class="keyword">this</span>.resultMap.put(Integer.toString(input.getId()), output);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 抽象子任务处理的逻辑，在子类中实现具体逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> input</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">handle</span><span class="params">(Task input)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Worker抽象方法handle的实现"><a href="#Worker抽象方法handle的实现" class="headerlink" title="Worker抽象方法handle的实现"></a>Worker抽象方法handle的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWoker</span> <span class="keyword">extends</span> <span class="title">Worker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handle</span><span class="params">(Task input)</span> </span>&#123;</span><br><span class="line">        Object output = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//处理任务的耗时。。 比如说进行操作数据库。。。</span></span><br><span class="line">            Thread.sleep(<span class="number">500</span>);</span><br><span class="line">            output = input.getPrice();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="进行计算的Main函数"><a href="#进行计算的Main函数" class="headerlink" title="进行计算的Main函数"></a>进行计算的Main函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取系统可用的线程数</span></span><br><span class="line">        <span class="keyword">int</span> i1 = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        Master master = <span class="keyword">new</span> Master(<span class="keyword">new</span> MyWoker(), i1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造Task并提交master任务</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            Task t = <span class="keyword">new</span> Task();</span><br><span class="line">            t.setId(i);</span><br><span class="line">            t.setPrice(r.nextInt(<span class="number">1000</span>));</span><br><span class="line">            master.submit(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//执行</span></span><br><span class="line">        master.execute();</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (master.isComplete()) &#123;</span><br><span class="line">                <span class="keyword">long</span> end = System.currentTimeMillis() - start;</span><br><span class="line">                <span class="keyword">int</span> priceResult = master.getResult();</span><br><span class="line">                System.out.println(<span class="string">"最终结果："</span> + priceResult + <span class="string">", 执行时间："</span> + end);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>Master-Worker</code>模式是一种将串行任务并行化的方案，被分解的子任务在系统中可以被并行处理，同时，如果有需要，<code>Master</code>进程不需要等待所有子任务都完成计算，就可以根据已有的部分结果集计算最终结果集。</p><hr><p>参考文章: <a href="http://blog.csdn.net/lmdcszh/article/details/39698189" target="_blank" rel="noopener">并发模型（二）——Master-Worker模式</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发模型（一）——Future模式</title>
      <link href="//posts/e3120e4f.html"/>
      <url>//posts/e3120e4f.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>多线程开发可以更好的发挥多核cpu性能，常用的多线程设计模式有：<code>Future</code>、<code>Master-Worker</code>、<code>Guard Susperionsion</code>、不变、生产者-消费者 模式；jdk除了定义了若干并发的数据结构，也内置了多线程框架和各种线程池锁（分为内部锁、重入锁、读写锁）、ThreadLocal、信号量等在并发控制中发挥着巨大的作用。这里重点介绍第一种并发——<code>Future模型</code>。</p><a id="more"></a><h1 id="什么是Future模型"><a href="#什么是Future模型" class="headerlink" title="什么是Future模型"></a>什么是Future模型</h1><p>该模型是将异步请求和代理模式联合的模型产物。类似商品订单模型。见下图：<br><img src="http://qiniu-pic.siven.net/blog/2018-01-19-070110.jpg" alt><br>客户端发送一个长时间的请求，服务端不需等待该数据处理完成便立即返回一个伪造的代理数据（相当于商品订单，不是商品本身），用户也无需等待，先去执行其他的若干操作后，再去调用服务器已经完成组装的真实数据。该模型充分利用了等待的时间片段。</p><h1 id="Future模式的核心结构"><a href="#Future模式的核心结构" class="headerlink" title="Future模式的核心结构"></a>Future模式的核心结构</h1><p><img src="http://qiniu-pic.siven.net/blog/2018-01-19-070203.jpg" alt></p><ul><li><p><code>Main</code>：启动系统，调用Client发出请求；</p></li><li><p><code>Client</code>：返回Data对象，理解返回FutureData，并开启ClientThread线程装配RealData；</p></li><li><p><code>Data</code>：返回数据的接口；</p></li><li><p><code>FutureData</code>：Future数据，构造很快，但是是一个虚拟的数据，需要装配RealData；</p></li><li><p><code>RealData</code>：真实数据，构造比较慢。</p></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="Main函数"><a href="#Main函数" class="headerlink" title="Main函数"></a>Main函数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">FutureClient fc = <span class="keyword">new</span> FutureClient();</span><br><span class="line">Data data = fc.request(<span class="string">"请求参数"</span>);</span><br><span class="line">System.out.println(<span class="string">"请求发送成功!"</span>);</span><br><span class="line">System.out.println(<span class="string">"做其他的事情..."</span>);</span><br><span class="line"></span><br><span class="line">String result = data.getRequest();</span><br><span class="line">System.out.println(result);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Client的实现"><a href="#Client的实现" class="headerlink" title="Client的实现"></a>Client的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Data <span class="title">request</span><span class="params">(<span class="keyword">final</span> String queryStr)</span></span>&#123;</span><br><span class="line"><span class="comment">//1 我想要一个代理对象（Data接口的实现类）先返回给发送请求的客户端，告诉他请求已经接收到，可以做其他的事情</span></span><br><span class="line"><span class="keyword">final</span> FutureData futureData = <span class="keyword">new</span> FutureData();</span><br><span class="line"><span class="comment">//2 启动一个新的线程，去加载真实的数据，传递给这个代理对象</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//3 这个新的线程可以去慢慢的加载真实对象，然后传递给代理对象</span></span><br><span class="line">RealData realData = <span class="keyword">new</span> RealData(queryStr);</span><br><span class="line">futureData.setRealData(realData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> futureData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Data的实现"><a href="#Data的实现" class="headerlink" title="Data的实现"></a>Data的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">String <span class="title">getRequest</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FutureData的实现"><a href="#FutureData的实现" class="headerlink" title="FutureData的实现"></a>FutureData的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 是对RealData的一个包装 </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureData</span> <span class="keyword">implements</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RealData realData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isReady = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setRealData</span><span class="params">(RealData realData)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果已经装载完毕了，就直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (isReady) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果没装载，进行装载真实对象</span></span><br><span class="line">        <span class="keyword">this</span>.realData = realData;</span><br><span class="line">        isReady = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//进行通知</span></span><br><span class="line">        notify();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果没装载好 程序就一直处于阻塞状态</span></span><br><span class="line">        <span class="keyword">while</span> (!isReady) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//装载好直接获取数据即可</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.realData.getRequest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RealData的实现"><a href="#RealData的实现" class="headerlink" title="RealData的实现"></a>RealData的实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealData</span> <span class="keyword">implements</span> <span class="title">Data</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String result ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RealData</span> <span class="params">(String queryStr)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"根据"</span> + queryStr + <span class="string">"进行查询，这是一个很耗时的操作.."</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"操作完毕，获取结果"</span>);</span><br><span class="line">result = <span class="string">"查询结果"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><p>FutureData是对RealData的包装，是对真实数据的一个代理，封装了获取真实数据的等待过程。它们都实现了共同的接口，所以，针对客户端程序组是没有区别的；</p></li><li><p>客户端在调用的方法中，单独启用一个线程来完成真实数据的组织，这对调用客户端的main函数式封闭的；</p></li><li><p>因为在FutureData中的notify和wait函数，主程序会等待组装完成后再会继续主进程，也就是如果没有组装完成，main函数会一直等待。</p></li></ul><hr><blockquote><p>参考文章: <a href="http://blog.csdn.net/lmdcszh/article/details/39696357" target="_blank" rel="noopener">并发模型（一）——Future模式</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat + Nginx 负载均衡配置详解</title>
      <link href="//posts/8bcfa124.html"/>
      <url>//posts/8bcfa124.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Nginx</code> + <code>Tomcat</code>集群是大家常用的一种搭配， 好处有很多, 而我做这个的初衷就两个目的： </p><ol><li>解决<code>Tomcat</code>的负载均衡问题； </li><li>当我上线的时候, 启动<code>Tomcat</code>, 能够做到外部访问不间断；</li></ol><p><img src="http://qiniu-pic.siven.net/blog/2018-03-01-122855.jpg" alt></p><a id="more"></a><h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><p>参看 <a href="../posts/3347f9ca.html">Nginx的安装及配置详解</a></p><h1 id="Tomcat服务器配置"><a href="#Tomcat服务器配置" class="headerlink" title="Tomcat服务器配置"></a>Tomcat服务器配置</h1><blockquote></blockquote><p>新建两个<code>Tomcat</code>服务器分别是：<br>Tomcat1，端口号：<code>8180</code><br>Tomcat2，端口号：<code>8280</code></p><h2 id="编辑Tomcat配置文件tomcat1"><a href="#编辑Tomcat配置文件tomcat1" class="headerlink" title="编辑Tomcat配置文件tomcat1"></a>编辑Tomcat配置文件tomcat1</h2><p>编辑配置文件: <code>/tomcat1/conf/server.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8105"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8180"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8109"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>这3个关键子地方的port, 很好记, 我现在修改后都是以 81开头的, 而之后的tomcat2 我就会以82开头:</p><h2 id="编辑Tomcat配置文件tomcat2"><a href="#编辑Tomcat配置文件tomcat2" class="headerlink" title="编辑Tomcat配置文件tomcat2"></a>编辑Tomcat配置文件tomcat2</h2><p>编辑配置文件: <code>/tomcat2/conf/server.xml</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">"8205"</span> <span class="attr">shutdown</span>=<span class="string">"SHUTDOWN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> <span class="attr">port</span>=<span class="string">"8280"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> <span class="attr">redirectPort</span>=<span class="string">"8243"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8209"</span> <span class="attr">protocol</span>=<span class="string">"AJP/1.3"</span> <span class="attr">redirectPort</span>=<span class="string">"8243"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><hr><p>分别启动两个Tomcat服务器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh /service/tomcat1/bin/startup.sh</span><br><span class="line">sh /service/tomcat1/bin/startup.sh</span><br></pre></td></tr></table></figure><hr><p>访问地址查看Tomcat结果：<br>Tomcat1：<a href="http://127.0.0.1:8180/" target="_blank" rel="noopener">http://127.0.0.1:8180/</a><br><img src="http://qiniu-pic.siven.net/blog/2018-01-06-052625.png" alt></p><p>Tomcat2：<a href="http://127.0.0.1:8280/" target="_blank" rel="noopener">http://127.0.0.1:8280/</a><br><img src="http://qiniu-pic.siven.net/blog/2018-01-06-052709.png" alt></p><h1 id="Nginx负载均衡配置"><a href="#Nginx负载均衡配置" class="headerlink" title="Nginx负载均衡配置"></a>Nginx负载均衡配置</h1><h2 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><h2 id="我的简单配置"><a href="#我的简单配置" class="headerlink" title="我的简单配置"></a>我的简单配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">pid  logs/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    </span><br><span class="line">    upstream mysvr &#123;  </span><br><span class="line">        #ip_hash;</span><br><span class="line">        server 127.0.0.1:8180 weight=1;</span><br><span class="line">        server 127.0.0.1:8280 weight=2;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  127.0.0.1;</span><br><span class="line">        index index.jsp;</span><br><span class="line"></span><br><span class="line">        charset utf-8;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass  http://mysvr;  </span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h2><p>请求<code>Nginx</code>访问地址：<a href="http://127.0.0.1:80/" target="_blank" rel="noopener">http://127.0.0.1:80/</a></p><ul><li>参考资料：<br><a href="http://my.oschina.net/vernon/blog/282925?p=1" target="_blank" rel="noopener">Nginx + Tomcat集群, 测试OK</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Nginx </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS安装Nodejs</title>
      <link href="//posts/33b4e017.html"/>
      <url>//posts/33b4e017.html</url>
      
        <content type="html"><![CDATA[<h1 id="下载Nodejs"><a href="#下载Nodejs" class="headerlink" title="下载Nodejs"></a>下载Nodejs</h1><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node官网</a></p><p><img src="http://qiniu-pic.siven.net/blog/htryo.png" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://npm.taobao.org/mirrors/node/v8.0.0/node-v8.0.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><h1 id="解压-amp-移动目录"><a href="#解压-amp-移动目录" class="headerlink" title="解压 &amp; 移动目录"></a>解压 &amp; 移动目录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf node-v8.0.0-linux-x64.tar.xz</span><br><span class="line">mv node-v8.0.0-linux-x64 /usr/local/node</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line">#set for nodejs</span><br><span class="line">export NODE_HOME=/usr/local/node</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><h1 id="测试安装"><a href="#测试安装" class="headerlink" title="测试安装"></a>测试安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h1 id="淘宝NPM镜像"><a href="#淘宝NPM镜像" class="headerlink" title="淘宝NPM镜像"></a>淘宝NPM镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx SSL 结合Tomcat 重定向URL变成HTTP的问题</title>
      <link href="//posts/d925bb5d.html"/>
      <url>//posts/d925bb5d.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>参考资料: <a href="http://emacsist.github.io/2016/01/19/Nginx-SSL-结合Tomcat-重定向URL变成HTTP的问题/" target="_blank" rel="noopener">《Nginx SSL 结合Tomcat 重定向URL变成HTTP的问题》</a><br>以下内容对该文章进行实践的过程进行记录说明</p></blockquote><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>由于要配置服务器(Nginx + Tomcat）的SSL的问题（Nginx同时监听<code>HTTP</code>和<code>HTTPS</code>)，但是，如果用户访问的是<code>HTTPS</code>协议，然后Tomcat进行重定向的时候，却变成了<code>HTTP</code>.</p><a id="more"></a><h2 id="逐步实践过程"><a href="#逐步实践过程" class="headerlink" title="逐步实践过程"></a>逐步实践过程</h2><p>在网上找了一些资料，有些是通过修改Nginx配置即可解决，也有只对Tomcat配置进行调整解决的… 各说不一，以下对尝试的解决过程进行记录：</p><h3 id="实践一：Nginx新增配置"><a href="#实践一：Nginx新增配置" class="headerlink" title="实践一：Nginx新增配置"></a>实践一：Nginx新增配置</h3><blockquote><p>HTTP协议制转为https</p></blockquote><p>Nginx代理的配置，要添加以下内容:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://test-server;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    # 必须配置:</span><br><span class="line">    proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line"></span><br><span class="line">    # 作用是对发送给客户端的URL进行修改, 将http协议强制转为https</span><br><span class="line">    proxy_redirect   http:// https://;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了方便测试<code>proxy_redirect</code>强制转换, http（80）、https（443）共存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;  </span><br><span class="line">    listen  443 ssl;  </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="重定向测试"><a href="#重定向测试" class="headerlink" title="重定向测试"></a>重定向测试</h4><ul><li><p>JAVA CODE：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpServletResponse resp = (HttpServletResponse)response;</span><br><span class="line">resp.sendRedirect(<span class="string">"/static/html/index.html"</span>);</span><br></pre></td></tr></table></figure></li><li><p>使用<code>HTTP</code>协议访问<code>nginx</code>代理地址之后,URL被重定向为<code>HTTPS</code>协议了， 如下图所示:<br><img src="http://qiniu-pic.siven.net/blog/2018-01-05-095224.png" alt></p></li></ul><ul><li>当然直接使用HTTPS协议访问, 肯定也是没有问题的，如下图所示:<br><img src="http://qiniu-pic.siven.net/blog/2018-01-05-095340.png" alt></li></ul><h4 id="转发测试"><a href="#转发测试" class="headerlink" title="转发测试"></a>转发测试</h4><ul><li><p>JAVA CODE：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HttpServletResponse resp = (HttpServletResponse)response;</span><br><span class="line">req.getRequestDispatcher(<span class="string">"/static/html/index.html"</span>).forward(request, response);</span><br></pre></td></tr></table></figure></li><li><p>测试结果与重定向一致, 无异常情况;</p></li></ul><h4 id="测试总结"><a href="#测试总结" class="headerlink" title="测试总结"></a>测试总结</h4><p>实际应用场景中,如果要求<code>HTTP</code>与<code>HTTPS</code>协议共存的时候(请求的协议与响应的协议一致)就会出现<code>HTTP</code>请求被强转为<code>HTTPS</code>，尝试将Nginx配置<code>proxy_redirect   http:// https://;</code>注释，最终使用<code>HTTPS</code>协议亦无法正常跳转;</p><h3 id="实践二：Tomcat新增配置"><a href="#实践二：Tomcat新增配置" class="headerlink" title="实践二：Tomcat新增配置"></a>实践二：Tomcat新增配置</h3><blockquote><p>不修改Nginx的情况下, 仅对Tomcat配置进行调整</p></blockquote><p>在<code>server.xml</code>的<code>Engine</code>模块下面配置多一个以下的<code>Valve</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Valve</span>  <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.RemoteIpValve"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">remoteIpHeader</span>=<span class="string">"X-Forwarded-For"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">protocolHeader</span>=<span class="string">"X-Forwarded-Proto"</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">protocolHeaderHttpsValue</span>=<span class="string">"https"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="重定向测试-1"><a href="#重定向测试-1" class="headerlink" title="重定向测试"></a>重定向测试</h4><p>使用<code>HTTPS</code>协议访问时,最终被重定向到<code>HTTP</code><br><img src="http://qiniu-pic.siven.net/blog/2018-01-05-112959.png" alt></p><h4 id="转发测试-1"><a href="#转发测试-1" class="headerlink" title="转发测试"></a>转发测试</h4><p>使用<code>HTTPS</code>协议访问，转发动作未出现问题<br><img src="http://qiniu-pic.siven.net/blog/2018-01-05-113147.png" alt></p><h4 id="测试总结-1"><a href="#测试总结-1" class="headerlink" title="测试总结"></a>测试总结</h4><p>重定向的时候, <code>HTTPS</code>协议被转为<code>HTTP</code>，测试结果不通过。</p><h3 id="实践三：终极方案"><a href="#实践三：终极方案" class="headerlink" title="实践三：终极方案"></a>实践三：终极方案</h3><h4 id="Nginx-配置"><a href="#Nginx-配置" class="headerlink" title="Nginx 配置"></a>Nginx 配置</h4><p>对过程一Nginx配置进行调整注释或删除<code>proxy_redirect</code>，最终如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://test-server;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">    # 必须配置:</span><br><span class="line">    proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Tomcat-配置"><a href="#Tomcat-配置" class="headerlink" title="Tomcat 配置"></a>Tomcat 配置</h4><p>参看：<a href="#实践二tomcat新增配置">Tomcat配置</a></p><h4 id="测试过程"><a href="#测试过程" class="headerlink" title="测试过程"></a>测试过程</h4><h5 id="HTTP协议请求"><a href="#HTTP协议请求" class="headerlink" title="HTTP协议请求"></a>HTTP协议请求</h5><p><img src="http://qiniu-pic.siven.net/blog/2018-01-05-115344.png" alt></p><h5 id="HTTPS协议请求"><a href="#HTTPS协议请求" class="headerlink" title="HTTPS协议请求"></a>HTTPS协议请求</h5><p><img src="http://qiniu-pic.siven.net/blog/2018-01-05-115431.png" alt></p><h4 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h4><p>测试通过，无论使用HTTP访问还是HTTPS访问，最终返回都是根据请求的协议进行响应，问题解决。</p><h2 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h2><ul><li>Nginx</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    upstream test-server &#123;  </span><br><span class="line">        server 10.15.16.6:8280 weight=1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #ssl_certificate      cert.pem;</span><br><span class="line">        #ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">        ssl_certificate      server.crt;</span><br><span class="line">        ssl_certificate_key  server.key;</span><br><span class="line"></span><br><span class="line">       # ssl_session_cache    shared:SSL:1m;</span><br><span class="line">       #ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">       # ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">       # ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass http://test-server;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">            proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">            # proxy_redirect   http:// https://;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> Tomcat </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx安装及配置详解</title>
      <link href="//posts/3347f9ca.html"/>
      <url>//posts/3347f9ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>Nginx</code>是一个web服务器也可以用来做负载均衡及反向代理使用，目前使用最多的就是负载均衡，具体简介我就不介绍了百度一下有很多，下面直接进入安装步骤；</p><ul><li>Nginx相关地址<br>源码：<a href="https://trac.nginx.org/nginx/browser" target="_blank" rel="noopener">https://trac.nginx.org/nginx/browser</a><br>官网：<a href="http://www.nginx.org/" target="_blank" rel="noopener">http://www.nginx.org/</a></li></ul><a id="more"></a><h1 id="安装Nginx及相关组件"><a href="#安装Nginx及相关组件" class="headerlink" title="安装Nginx及相关组件"></a>安装Nginx及相关组件</h1><p><strong>Nginx依赖以下模块</strong></p><ul><li>gzip模块需要 zlib 库</li><li>rewrite模块需要 pcre 库 </li><li>ssl 功能需要openssl库</li></ul><h2 id="下载安装PCRE"><a href="#下载安装PCRE" class="headerlink" title="下载安装PCRE"></a>下载安装PCRE</h2><ol><li>获取pcre编译安装包，在<a href="http://www.pcre.org/" target="_blank" rel="noopener">官网</a>上可以获取当前最新的版本<br>文章使用的版本： <a href="http://heanet.dl.sourceforge.net/project/pcre/pcre/8.38/pcre-8.38.tar.bz2" target="_blank" rel="noopener">点击下载</a></li><li>解压缩pcre-xx.tar.bz2包。</li><li>进入解压缩目录，执行./configure。</li><li>make &amp; make install</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install bzip2 -y</span><br><span class="line">bzip2 -d pcre-8.38.tar.bz2</span><br><span class="line">tar -xf pcre-8.38.tar</span><br><span class="line"><span class="built_in">cd</span> pcre-8.38</span><br><span class="line">sudo ./configure --prefix=/usr/<span class="built_in">local</span>/pcre</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="下载安装zlib库"><a href="#下载安装zlib库" class="headerlink" title="下载安装zlib库"></a>下载安装zlib库</h2><ol><li>获取zlib编译安装包，在<a href="http://www.zlib.net/" target="_blank" rel="noopener">官网</a>上可以获取当前最新的版本。<br>文章使用的版本：<a href="http://liquidtelecom.dl.sourceforge.net/project/libpng/zlib/1.2.6/zlib-1.2.6.tar.gz" target="_blank" rel="noopener">点击下载</a></li><li>解压缩zlib-1.2.6.tar.gz 包。</li><li>进入解压缩目录，执行./configure。</li><li>make &amp; make install</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf zlib-1.2.6.tar.gz </span><br><span class="line"><span class="built_in">cd</span> zlib-1.2.6</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/zlib</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="下载安装OpenSSL"><a href="#下载安装OpenSSL" class="headerlink" title="下载安装OpenSSL"></a>下载安装OpenSSL</h2><ol><li>获取openssl编译安装包，在<a href="http://www.openssl.org/source/" target="_blank" rel="noopener">官网</a>上可以获取当前最新的版本。<br>文章使用的版本：<a href="https://www.openssl.org/source/openssl-1.0.1t.tar.gz" target="_blank" rel="noopener">点击下载</a></li><li>解压缩openssl-xx.tar.gz包。</li><li>进入解压缩目录，执行./config。</li><li>make &amp; make install</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openssl-1.0.1t.tar.gz</span><br><span class="line"><span class="built_in">cd</span> openssl-1.0.1t</span><br><span class="line">sudo ./configure --prefix=/usr/<span class="built_in">local</span>/openssl</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="下载安装Nginx"><a href="#下载安装Nginx" class="headerlink" title="下载安装Nginx"></a>下载安装Nginx</h2><ol><li>获取nginx，在<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">官网</a>上可以获取当前最新的版本。<br>文章使用的版本：<a href="http://nginx.org/download/nginx-1.9.15.tar.gz" target="_blank" rel="noopener">点击下载</a></li><li>解压缩nginx-xx.tar.gz包。</li><li>进入解压缩目录，执行./configure</li><li>make &amp; make install</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.9.15.tar.gz</span><br><span class="line"><span class="built_in">cd</span> nginx-1.9.15</span><br><span class="line">sudo ./configure --prefix=/usr/<span class="built_in">local</span>/nginx</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><blockquote><p>若安装时找不到上述依赖模块，使用–with-openssl=&lt; openssl_dir&gt;、–with-pcre=&lt; pcre_dir&gt;、–with-zlib=&lt; zlib_dir&gt;指定依赖的模块目录 (模块源码的安装包目录，而非安装后的目录)。</p></blockquote><h2 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">configure: error: You need a C++ compiler for C++ support.</span><br><span class="line">make[1]: *** [/root/tools/pcre-8.38/Makefile] Error 1</span><br><span class="line">make[1]: Leaving directory `/root/tools/nginx-1.13.12&apos;</span><br><span class="line">make: *** [install] Error 2</span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>安装gcc, gcc-c++ lib 即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure></p><h1 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><p>启动<code>nginx</code>之后，浏览器中输入<code>http://localhost</code>可以验证是否安装启动成功。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止Nginx</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/nginx/sbin/nginx -s </span><br><span class="line"><span class="comment"># 启动Nginx</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/nginx/sbin/nginx</span><br><span class="line"><span class="comment"># 加载Nginx配置</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/nginx/sbin/nginx -c /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><h1 id="Nginx配置文件详细说明"><a href="#Nginx配置文件详细说明" class="headerlink" title="Nginx配置文件详细说明"></a>Nginx配置文件详细说明</h1><p><strong>编辑配置文件</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p><p>在此记录下Nginx服务器nginx.conf的配置文件说明, 部分注释收集与网络，<a href="http://www.cnblogs.com/xiaogangqq123/archive/2011/03/02/1969006.html" target="_blank" rel="noopener">Nginx配置文件详细说明</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line">#运行用户</span><br><span class="line">user www-data;    </span><br><span class="line">#启动进程,通常设置成和cpu的数量相等</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#全局错误日志及PID文件</span><br><span class="line">error_log  /var/log/nginx/error.log;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">#工作模式及连接数上限</span><br><span class="line">events &#123;</span><br><span class="line">    use   epoll;             #epoll是多路复用IO(I/O Multiplexing)中的一种方式,但是仅用于linux2.6以上内核,可以大大提高nginx的性能</span><br><span class="line">    worker_connections  1024;#单个后台worker process进程的最大并发链接数</span><br><span class="line">    # multi_accept on; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">    #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    access_log    /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，</span><br><span class="line">    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #连接超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    tcp_nodelay        on;</span><br><span class="line">    </span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    gzip  on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</span><br><span class="line"></span><br><span class="line">    #设定请求缓冲</span><br><span class="line">    client_header_buffer_size    1k;</span><br><span class="line">    large_client_header_buffers  4 4k;</span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    include /etc/nginx/sites-enabled/*;</span><br><span class="line"></span><br><span class="line">    #设定负载均衡的服务器列表</span><br><span class="line">    upstream mysvr &#123;</span><br><span class="line">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">        #本机上的Squid开启3128端口</span><br><span class="line">        server 192.168.8.1:3128 weight=5;</span><br><span class="line">        server 192.168.8.2:80  weight=1;</span><br><span class="line">        server 192.168.8.3:80  weight=6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听80端口</span><br><span class="line">        listen       80;</span><br><span class="line">        #定义使用www.xx.com访问</span><br><span class="line">        server_name  www.xx.com;</span><br><span class="line"></span><br><span class="line">        #设定本虚拟主机的访问日志</span><br><span class="line">        access_log  logs/www.xx.com.access.log  main;</span><br><span class="line"></span><br><span class="line">        #默认请求</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /root;      #定义服务器的默认网站根目录位置</span><br><span class="line">            index index.php index.html index.htm;   #定义首页索引文件的名称</span><br><span class="line"></span><br><span class="line">            fastcgi_pass  www.xx.com;</span><br><span class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root/$fastcgi_script_name; </span><br><span class="line">            include /etc/nginx/fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # 定义错误提示页面</span><br><span class="line">        error_page   500 502 503 504 /50x.html;  </span><br><span class="line">            location = /50x.html &#123;</span><br><span class="line">            root   /root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #静态文件，nginx自己处理</span><br><span class="line">        location ~ ^/(images|javascript|js|css|flash|media|static)/ &#123;</span><br><span class="line">            root /var/www/virtual/htdocs;</span><br><span class="line">            #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。</span><br><span class="line">            expires 30d;</span><br><span class="line">        &#125;</span><br><span class="line">        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">            root /root;</span><br><span class="line">            fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            fastcgi_index index.php;</span><br><span class="line">            fastcgi_param SCRIPT_FILENAME /home/www/www$fastcgi_script_name;</span><br><span class="line">            include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">        #设定查看Nginx状态的地址</span><br><span class="line">        location /NginxStatus &#123;</span><br><span class="line">            stub_status            on;</span><br><span class="line">            access_log              on;</span><br><span class="line">            auth_basic              &quot;NginxStatus&quot;;</span><br><span class="line">            auth_basic_user_file  conf/htpasswd;</span><br><span class="line">        &#125;</span><br><span class="line">        #禁止访问 .htxxx 文件</span><br><span class="line">        location ~ /\.ht &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上是一些基本的配置，使用Nginx最大的好处就是负载均衡，如果要使用负载均衡的话,可以修改配置http节点如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#设定http服务器，利用它的反向代理功能提供负载均衡支持</span><br><span class="line">http &#123;</span><br><span class="line">     #设定mime类型,类型由mime.type文件定义</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #设定日志格式</span><br><span class="line">    access_log    /var/log/nginx/access.log;</span><br><span class="line"></span><br><span class="line">    #省略上文有的一些配置节点</span><br><span class="line"></span><br><span class="line">    #。。。。。。。。。。</span><br><span class="line"></span><br><span class="line">    #设定负载均衡的服务器列表</span><br><span class="line">    upstream mysvr &#123;</span><br><span class="line">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">        server 192.168.8.1x:3128 weight=5;#本机上的Squid开启3128端口</span><br><span class="line">        server 192.168.8.2x:80  weight=1;</span><br><span class="line">        server 192.168.8.3x:80  weight=6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    upstream mysvr2 &#123;</span><br><span class="line">        #weigth参数表示权值，权值越高被分配到的几率越大</span><br><span class="line">        server 192.168.8.x:80  weight=1;</span><br><span class="line">        server 192.168.8.x:80  weight=6;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #第一个虚拟服务器</span><br><span class="line">    server &#123;</span><br><span class="line">        #侦听192.168.8.x的80端口</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  192.168.8.x;</span><br><span class="line"></span><br><span class="line">        #对aspx后缀的进行负载均衡请求</span><br><span class="line">        location ~ .*\.aspx$ &#123;</span><br><span class="line"></span><br><span class="line">            root   /root;      #定义服务器的默认网站根目录位置</span><br><span class="line">            index index.php index.html index.htm;   #定义首页索引文件的名称</span><br><span class="line"></span><br><span class="line">            proxy_pass  http://mysvr ;#请求转向mysvr 定义的服务器列表</span><br><span class="line"></span><br><span class="line">            #以下是一些反向代理的配置可删除.</span><br><span class="line"></span><br><span class="line">            proxy_redirect off;</span><br><span class="line"></span><br><span class="line">            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            client_max_body_size 10m;    #允许客户端请求的最大单文件字节数</span><br><span class="line">            client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class="line">            proxy_connect_timeout 90;  #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class="line">            proxy_send_timeout 90;        #后端服务器数据回传时间(代理发送超时)</span><br><span class="line">            proxy_read_timeout 90;         #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class="line">            proxy_buffer_size 4k;             #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class="line">            proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置</span><br><span class="line">            proxy_busy_buffers_size 64k;    #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class="line">            proxy_temp_file_write_size 64k;  #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>参考资料：<br><a href="http://www.cnblogs.com/skynet/p/4146083.html" target="_blank" rel="noopener">Nginx安装与使用</a><br><a href="http://www.cnblogs.com/zhongshengzhen/p/nginx.html" target="_blank" rel="noopener">CentOS6.5安装nginx及负载均衡配置</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS配置iptables防火墙</title>
      <link href="//posts/fc434b3c.html"/>
      <url>//posts/fc434b3c.html</url>
      
        <content type="html"><![CDATA[<p>CentOS7默认的防火墙不是iptables,而是firewalle.</p><h1 id="禁用-停止自带的firewalld服务"><a href="#禁用-停止自带的firewalld服务" class="headerlink" title="禁用/停止自带的firewalld服务"></a>禁用/停止自带的firewalld服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#停止firewalld服务  </span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">#禁止firewall开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><h1 id="安装iptable-iptable-service"><a href="#安装iptable-iptable-service" class="headerlink" title="安装iptable iptable-service"></a>安装iptable iptable-service</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#先检查是否安装了iptables  </span><br><span class="line">service iptables status  </span><br><span class="line">#安装iptables  </span><br><span class="line">yum install -y iptables  </span><br><span class="line">#升级iptables  </span><br><span class="line">yum update iptables   </span><br><span class="line">#安装iptables-services  </span><br><span class="line">yum install iptables-services</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="设置现有规则"><a href="#设置现有规则" class="headerlink" title="设置现有规则"></a>设置现有规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#查看iptables现有规则</span><br><span class="line">iptables -L -n</span><br><span class="line">#先允许所有,不然有可能会杯具</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">#清空所有默认规则</span><br><span class="line">iptables -F</span><br><span class="line">#清空所有自定义规则</span><br><span class="line">iptables -X</span><br><span class="line">#所有计数器归0</span><br><span class="line">iptables -Z</span><br><span class="line">#允许来自于lo接口的数据包(本地访问)</span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">#开放22端口</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">#开放21端口(FTP)</span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">#开放80端口(HTTP)</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">#开放443端口(HTTPS)</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line">#允许ping</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">#允许接受本机请求之后的返回数据 RELATED,是为FTP设置的</span><br><span class="line">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">#其他入站一律丢弃</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">#所有出站一律绿灯</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">#所有转发一律丢弃</span><br><span class="line">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure><h1 id="其他规则设定"><a href="#其他规则设定" class="headerlink" title="其他规则设定"></a>其他规则设定</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#如果要添加内网ip信任（接受其所有TCP请求）  </span><br><span class="line">iptables -A INPUT -p tcp -s 45.96.174.68 -j ACCEPT  </span><br><span class="line">#过滤所有非以上规则的请求  </span><br><span class="line">iptables -P INPUT DROP  </span><br><span class="line"></span><br><span class="line">#要封停一个IP，使用下面这条命令：  </span><br><span class="line">iptables -I INPUT -s ***.***.***.*** -j DROP  </span><br><span class="line">#要解封一个IP，使用下面这条命令:  </span><br><span class="line">iptables -D INPUT -s ***.***.***.*** -j DROP</span><br></pre></td></tr></table></figure><h1 id="保存规则设定"><a href="#保存规则设定" class="headerlink" title="保存规则设定"></a>保存规则设定</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#保存上述规则  </span><br><span class="line">service iptables save</span><br></pre></td></tr></table></figure><h1 id="开启iptables服务"><a href="#开启iptables服务" class="headerlink" title="开启iptables服务"></a>开启iptables服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#注册iptables服务  </span><br><span class="line">#相当于以前的chkconfig iptables on  </span><br><span class="line">systemctl enable iptables.service  </span><br><span class="line">#开启服务  </span><br><span class="line">systemctl start iptables.service  </span><br><span class="line">#查看状态  </span><br><span class="line">systemctl status iptables.service</span><br></pre></td></tr></table></figure><h1 id="解决vsftpd在iptables开启后-无法使用被动模式的问题"><a href="#解决vsftpd在iptables开启后-无法使用被动模式的问题" class="headerlink" title="解决vsftpd在iptables开启后,无法使用被动模式的问题"></a>解决vsftpd在iptables开启后,无法使用被动模式的问题</h1><h2 id="首先在-etc-sysconfig-iptables-config中修改或者添加以下内容"><a href="#首先在-etc-sysconfig-iptables-config中修改或者添加以下内容" class="headerlink" title="首先在/etc/sysconfig/iptables-config中修改或者添加以下内容"></a>首先在/etc/sysconfig/iptables-config中修改或者添加以下内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#添加以下内容,注意顺序不能调换  </span><br><span class="line">IPTABLES_MODULES=&quot;ip_conntrack_ftp&quot;  </span><br><span class="line">IPTABLES_MODULES=&quot;ip_nat_ftp&quot;</span><br></pre></td></tr></table></figure><h2 id="重新设置iptables设置"><a href="#重新设置iptables设置" class="headerlink" title="重新设置iptables设置"></a>重新设置iptables设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h1 id="以下为完整设置脚本"><a href="#以下为完整设置脚本" class="headerlink" title="以下为完整设置脚本"></a>以下为完整设置脚本</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line">iptables -F</span><br><span class="line">iptables -X</span><br><span class="line">iptables -Z</span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br><span class="line">iptables -A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line">iptables -P FORWARD DROP</span><br><span class="line">service iptables save</span><br><span class="line">systemctl restart iptables.service</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> CentOS </tag>
            
            <tag> iptables </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实体类（VO，DO，DTO，PO）的划分</title>
      <link href="//posts/b6973370.html"/>
      <url>//posts/b6973370.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>经常会接触到<code>VO</code>、<code>DO</code>、<code>DTO</code>和<code>PO</code>的概念，本文从领域建模中的实体划分和项目中的实际应用情况两个角度，对这几个概念进行简析。<br><strong>得出的主要结论是：</strong></p><ul><li><code>VO</code>对应于页面上需要显示的数据（表单）</li><li><code>DO</code>对应于数据库中存储的数据（数据表）</li><li><code>DTO</code>对应于除二者之外需要进行传递的数据</li><li><code>PO</code>对应持久层的映射关系</li></ul><a id="more"></a><h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><p>百度百科中对于实体类的定义如下：</p><blockquote><p>实体类的主要职责是存储和管理系统内部的信息，它也可以有行为，甚至很复杂的行为，但这些行为必须与它所代表的实体对象密切相关。</p></blockquote><p>根据以上定义，我们可以了解到，实体类有两方面内容，存储数据和执行数据本身相关的操作。这两方面内容对应到实现上，最简单的实体类是<code>POJO</code>类，含有属性及属性对应的<code>set</code>和<code>get</code>方法，实体类常见的方法还有用于输出自身数据的<code>toString</code>方法。</p><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-25-074258.jpg" alt></p><h1 id="领域模型中的实体类"><a href="#领域模型中的实体类" class="headerlink" title="领域模型中的实体类"></a>领域模型中的实体类</h1><p>领域模型中的实体类分为四种类型：<code>VO</code>、<code>DTO</code>、<code>DO</code>、<code>PO</code>，各种实体类用于不同业务层次间的交互，并会在层次内实现实体类之间的转化。<br>业务分层为：视图层（<code>VIEW</code>+<code>ACTION</code>），服务层（<code>SERVICE</code>），持久层（<code>DAO</code>）<br>相应各层间实体的传递如下图：</p><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-25-074317.jpg" alt></p><p>项目中我们并没有严格遵循这种传递关系，但这种和业务层次的关联对我们理解各实体类的作用是有帮助的。（我们没有接触到PO的原因，我理解为ORM对PO进行了封装）<br>以下是资料的原文，上图是基于此绘制的：</p><p><strong>概念：</strong></p><ul><li><p><code>VO</code>（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</p></li><li><p><code>DTO</code>（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</p></li><li><p><code>DO</code>（Domain Object）：领域对象，就是从现实世界中抽象出来的有形或无形的业务实体。</p></li><li><p><code>PO</code>（Persistent Object）：持久化对象，它跟持久层（通常是关系型数据库）的数据结构形成一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。</p></li></ul><p><strong>模型：</strong><br>下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置：</p><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-25-075248.jpg" alt></p><ul><li>用户发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。</li><li>展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。</li><li>服务层首先根据DTO的数据构造（或重建）一个DO，调用DO的业务方法完成具体业务。</li><li>服务层把DO转换为持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的- 持久化方法，把PO传递给它，完成持久化操作。</li><li>对于一个逆向操作，如读取数据，也是用类似的方式转换和传递，略。</li></ul><h1 id="项目中的实体类"><a href="#项目中的实体类" class="headerlink" title="项目中的实体类"></a>项目中的实体类</h1><p>项目中常见的实体类有<code>VO</code>，<code>DO</code>和<code>DTO</code>，命名规则也常是以相应字符串结尾，如<code>*VO.Java</code>。但是DTO不总是遵循这个规则，而通常与他的用途有关，如写成<code>*Query.java</code>，表示存储了一个查询条件。项目中实体类出现的业务层次也没有这么严格，例如我们可以在视图层就组装一个<code>DO</code>，也可以将一个<code>VO</code>从持久层传出来，所以与业务分层相关联的划分方法显得有些冗余。从项目代码中抽象出的理解是：VO对应于页面上需要显示的数据，DO对应于数据库中存储的数据，DTO对应于除二者之外需要进行传递的数据。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码生成利器：IDEA 强大的 Live Templates</title>
      <link href="//posts/7d50b50c.html"/>
      <url>//posts/7d50b50c.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java 开发过程经常需要编写有固定格式的代码，例如说声明一个私有变量，logger或者bean等等。对于这种小范围的代码生成，我们可以利用 IDEA 提供的 Live Templates功能。刚开始觉得它只是一个简单的Code Snippet，后来发现它支持变量函数配置，可以支持很复杂的代码生成。下面我来介绍一下Live Templates的用法。</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>IDEA 自带很多常用的动态模板，在 Java 代码中输入<code>fori</code>，回车就会出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (int i = 0; i &lt; ; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-20-live01.gif" alt="fori"></p><p>按<code>Tab</code>可以在各个空白处跳转，手动填值。</p><a id="more"></a><h1 id="自定义-Template"><a href="#自定义-Template" class="headerlink" title="自定义 Template"></a>自定义 Template</h1><p>官方自带模板毕竟不能满足我们个人编码风格的需要，Live Templates提供了变量函数的方式供我们自定义。</p><h2 id="简单用法"><a href="#简单用法" class="headerlink" title="简单用法"></a>简单用法</h2><p>新增自定义模板，首先需要填写触发单词（即 Abbreviation），描述是可选的，然后定义模板的上下文，点击define选择Java，这样在编辑 Java 的时候就会触发当前模板，定义完上下文之后，就可以填写模板了。<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-20-live02.gif" alt="new template"></p><p>下面列举几个我常用的简单模板<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">==========</span><br><span class="line">&lt;out&gt;</span><br><span class="line">----------</span><br><span class="line">System.out.println($END$)</span><br><span class="line">==========</span><br><span class="line">&lt;pfs&gt;</span><br><span class="line">----------</span><br><span class="line">private final static String $varName$  = &quot;$var$&quot;;`</span><br><span class="line">==========</span><br><span class="line">&lt;privateField&gt;</span><br><span class="line">----------</span><br><span class="line">/**</span><br><span class="line"> * $COMMENT$</span><br><span class="line"> */</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">private $TYPE$ $NAME$;</span><br><span class="line">==========</span><br><span class="line">&lt;main&gt;</span><br><span class="line">----------</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">     $END$</span><br><span class="line">&#125;</span><br><span class="line">==========</span><br></pre></td></tr></table></figure></p><p>模板支持变量的定义，使用<code>$$</code>包围的字符表示一个变量。<code>$END$</code>是一个特殊的预定义变量，表示光标最后跳转的位置。每个变量的位置都可以跳转过去。</p><h2 id="高级用法"><a href="#高级用法" class="headerlink" title="高级用法"></a>高级用法</h2><p>如果你用过 vim 的<code>Code Sinppet</code>插件，你会发现模板里面是可以执行函数的，强大的<code>Live Templates</code>当然也支持，而且 IDEA 能够感知代码的语义，例如说当前编辑的函数的参数。但这一点就能够让我们玩出花来。我们从易到难来研究模板函数的功能。<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-20-live04.gif" alt="variables function"></p><p>前面我们提到的变量可以绑定函数，配置方式如上图所示。</p><h2 id="快速声明变量"><a href="#快速声明变量" class="headerlink" title="快速声明变量"></a>快速声明变量</h2><p>声明变量是一个常用的操作，特别是需要声明变量需要加注解，注释的时候，这些代码写起来就很枯燥。下面是我定义的模板：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;osgiRef&gt;</span><br><span class="line">----------</span><br><span class="line">/**</span><br><span class="line"> * $END$</span><br><span class="line"> */</span><br><span class="line">@OsgiReference</span><br><span class="line">@Setter</span><br><span class="line">private $TYPE$ $NAME$;</span><br></pre></td></tr></table></figure></p><p>乍一看这个模板跟我上面定义的<code>privateField</code>差不多，唯一的不同在于我给这些变量绑定了函数。</p><ol><li><code>clipboard()</code>：返回当前粘贴板的字符串</li><li><code>decapitalize()</code>：将输入的字符串首字母变为小写<br>下面我们演示一下，我们先拷贝当前类名，然后输入<code>osgiRef</code></li></ol><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-20-live03.gif" alt="osgiRef"></p><h2 id="快速声明-Logger"><a href="#快速声明-Logger" class="headerlink" title="快速声明 Logger"></a>快速声明 Logger</h2><p>声明 logger 也是一个常用的操作，上面我们是利用了粘贴函数来快速声明变量，现在我们来利用另一个函数<code>className()</code>，顾名思义，它的作用就是返回当前类名。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;logger&gt;</span><br><span class="line">----------</span><br><span class="line">/** logger */</span><br><span class="line">private static final Logger LOGGER = LoggerFactory.getLogger($CLASS$.class);</span><br></pre></td></tr></table></figure><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-20-live05.gif" alt="logger"></p><h2 id="最强大的-groovyScript"><a href="#最强大的-groovyScript" class="headerlink" title="最强大的 groovyScript()"></a>最强大的 groovyScript()</h2><p>如果说上面用到的函数提供的能力有限，不够灵活，那么groovyScript()提供了一切你想要的能力，它支持执行 Groovy 脚本处理输入，然后输出处理后的字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groovyScript(&quot;code&quot;, ...)</span><br><span class="line"></span><br><span class="line">|  code   |   一段Groovy代码或者Groovy脚本代码绝对路径    |</span><br><span class="line">|  ...    |   可选入参，这些参数会绑定到`_1, _2, _3, ..._n`, 在 Groovy 代码中使用。|</span><br></pre></td></tr></table></figure></p><p>下面我们来看一下它的实际应用。</p><h2 id="快速-bean-配置"><a href="#快速-bean-配置" class="headerlink" title="快速 bean 配置"></a>快速 bean 配置</h2><p>新增一个服务都要在 Spring 中注册一个 bean，一般这个配置无非就是将指明<code>id</code>和<code>class</code>，由于我们是在 xml 中配置，所以不能利用className()函数，但是我们可以利用<code>clipboard()</code>函数获取到类的全引用，在 IDEA 中我们直接右键类名，点击<code>Copy Reference</code>就行。然后执行 groovy 脚本获取类名。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean&gt;</span><br><span class="line">----------</span><br><span class="line">&lt;bean id=&quot;$id$&quot; class=&quot;$REF$&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p><code>id</code>绑定<code>decapitalize(groovyScript(&quot;_1.tokenize(&#39;.&#39;)[-1]&quot;, clipboard()))</code>，首先取<code>clipboard()</code>的值得到类的全引用，然后执行 groovy 代码<code>_1.tokenize(&#39;.&#39;)[-1]</code>（按<code>.</code>分割为字符串数组，然后取最后一个即可得到类名，然后用<code>decapitalize()</code>将首字母小写即可得到<code>id</code>，<code>REF</code>绑定<code>clipboard()</code>即可</p><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-20-live06.gif" alt="bean"></p><h2 id="快速打印当前上下文信息"><a href="#快速打印当前上下文信息" class="headerlink" title="快速打印当前上下文信息"></a>快速打印当前上下文信息</h2><p>打印错误日志的时候需要打印当前上下文信息的，例如说入参，有时候入参很多的时候，写起来很痛苦，好在有模板函数<code>methodParameters()</code>，返回当前函数参数的列表，当然这个列表我们不能直接使用，需要结合<code>groovyScript</code>对它进行转化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;printContext&gt;</span><br><span class="line">---------------</span><br><span class="line">LogUtil.$TYPE$(LOGGER, &quot;$MSG$ &quot; + $params$);</span><br></pre></td></tr></table></figure></p><p>将<code>params</code>绑定到<code>groovyScript(&quot;&#39;\&quot;&#39; + _1.collect { it + &#39; = [\&quot; + &#39; + it + &#39; + \&quot;]&#39;}.join(&#39;, &#39;) + &#39;\&quot;&#39;&quot;, methodParameters())</code>，就能够自动将当前函数的参数格式化后输出。</p><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-12-20-live07.gif" alt="printContext"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面我们简单介绍了常用的模板函数，其实 IDEA 还有很多其它模板函数，具体参考<a href="https://www.jetbrains.com/help/idea/2016.3/creating-and-editing-template-variables.html" target="_blank" rel="noopener">Creating and Editing Template Variables</a>。IDEA 是一个很强大的工具，善用工具能够极大的提高工作效率，将精力投入到关键的事情上，而不是将时间浪费在编写重复代码上面。一些更高级的用法还有待大家去发掘。</p>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Info 参数详解</title>
      <link href="//posts/2f4e5423.html"/>
      <url>//posts/2f4e5423.html</url>
      
        <content type="html"><![CDATA[<p>以一种易于解释（parse）且易于阅读的格式，返回关于 Redis 服务器的各种信息和统计数值。<br>通过给定可选的参数 section ，可以让命令只返回某一部分的信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -p 7000</span><br><span class="line">info</span><br></pre></td></tr></table></figure><ul><li>server : 一般 Redis 服务器信息，包含以下域：<ul><li>redis_version : Redis 服务器版本</li><li>redis_git_sha1 : Git SHA1</li><li>redis_git_dirty : Git dirty flag</li><li>os : Redis 服务器的宿主操作系统</li><li>arch_bits : 架构（32 或 64 位）</li><li>multiplexing_api : Redis 所使用的事件处理机制</li><li>gcc_version : 编译 Redis 时所使用的 GCC 版本</li><li>process_id : 服务器进程的 PID</li><li>run_id : Redis 服务器的随机标识符（用于 Sentinel  - 和集群）</li><li>tcp_port : TCP/IP 监听端口</li><li>uptime_in_seconds : 自 Redis 服务器启动以来，经 - 过的秒数</li><li>uptime_in_days : 自 Redis 服务器启动以来，经过的  - 天数</li><li>lru_clock : 以分钟为单位进行自增的时钟，用于 LRU 管理</li></ul></li></ul><a id="more"></a><ul><li><p>clients : 已连接客户端信息，包含以下域：</p><ul><li>connected_clients : 已连接客户端的数量（不包括 通过- 从属服务器连接的客户端）</li><li>client_longest_output_list : 当前连接的客户端 当- 中，最长的输出列表</li><li>client_longest_input_buf : 当前连接的客户端当  - 中，最大输入缓存</li><li>blocked_clients : 正在等待阻塞命令（BLPOP、- BRPOP、BRPOPLPUSH）的客户端的数量</li></ul></li><li><p>memory : 内存信息，包含以下域：</p><ul><li>used_memory : 由 Redis 分配器分配的内存总量，以字 - 节（byte）为单位</li><li>used_memory_human : 以人类可读的格式返回 Redis    - 分配的内存总量</li><li>used_memory_rss : 从操作系统的角度，返回 Redis 已   - 分配的内存总量（俗称常驻集大小）。这个值和 top 、    - ps 等命令的输出一致。</li><li>used_memory_peak : Redis 的内存消耗峰值（以字节为   - 单位）</li><li>used_memory_peak_human : 以人类可读的格式返回     - Redis 的内存消耗峰值</li><li>used_memory_lua : Lua 引擎所使用的内存大小（以字 - 节为单位）</li><li>mem_fragmentation_ratio : used_memory_rss 和     - used_memory 之间的比率</li><li>mem_allocator : 在编译时指定的， Redis 所使用的内存分配器。可以是 libc 、 jemalloc 或者 tcmalloc 。</li></ul></li></ul><blockquote><p>在理想情况下， used_memory_rss 的值应该只比 used_memory 稍微高一点儿。<br>当 rss &gt; used ，且两者的值相差较大时，表示存在（内部或外部的）内存碎片。<br>内存碎片的比率可以通过 mem_fragmentation_ratio 的值看出。<br>当 used &gt; rss 时，表示 Redis 的部分内存被操作系统换出到交换空间了，在这种情况下，操作可能会产生明显的延迟。<br>Because Redis does not have control over how its allocations are mapped to memory pages, high used_memory_rss is often the result of a spike in memory usage.<br>当 Redis 释放内存时，分配器可能会，也可能不会，将内存返还给操作系统。<br>如果 Redis 释放了内存，却没有将内存返还给操作系统，那么 used_memory 的值可能和操作系统显示的 Redis 内存占用并不一致。<br>查看 used_memory_peak 的值可以验证这种情况是否发生。</p></blockquote><ul><li>persistence : RDB 和 AOF 的相关信息</li><li>stats : 一般统计信息</li><li>replication : 主/从复制信息</li><li>cpu : CPU 计算量统计信息</li><li>commandstats : Redis 命令统计信息</li><li>cluster : Redis 集群信息</li><li>keyspace : 数据库相关的统计信息</li></ul><p>除上面给出的这些值以外，参数还可以是下面这两个：</p><ul><li>all : 返回所有信息</li><li>default : 返回默认选择的信息</li></ul><p>当不带参数直接调用 <a href="http://redis.readthedocs.io/en/latest/server/info.html#info" target="_blank" rel="noopener">INFO</a> 命令时，使用 default 作为默认参数。<br>不同版本的 Redis 可能对返回的一些域进行了增加或删减。<br>因此，一个健壮的客户端程序在对 <a href="http://redis.readthedocs.io/en/latest/server/info.html#info" target="_blank" rel="noopener">INFO</a> 命令的输出进行分析时，应该能够跳过不认识的域，并且妥善地处理丢失不见的域。<br><strong>可用版本：</strong><br>1.0.0<br><strong>时间复杂度：</strong><br>O(1)<br><strong>返回值：</strong><br>具体请参见下面的测试代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; INFO</span><br><span class="line"># Server</span><br><span class="line">redis_version:2.5.9</span><br><span class="line">redis_git_sha1:473f3090</span><br><span class="line">redis_git_dirty:0</span><br><span class="line">os:Linux 3.3.7-1-ARCH i686</span><br><span class="line">arch_bits:32</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">gcc_version:4.7.0</span><br><span class="line">process_id:8104</span><br><span class="line">run_id:bc9e20c6f0aac67d0d396ab950940ae4d1479ad1</span><br><span class="line">tcp_port:6379</span><br><span class="line">uptime_in_seconds:7</span><br><span class="line">uptime_in_days:0</span><br><span class="line">lru_clock:1680564</span><br><span class="line"></span><br><span class="line"># Clients</span><br><span class="line">connected_clients:1</span><br><span class="line">client_longest_output_list:0</span><br><span class="line">client_biggest_input_buf:0</span><br><span class="line">blocked_clients:0</span><br><span class="line"></span><br><span class="line"># Memory</span><br><span class="line">used_memory:439304</span><br><span class="line">used_memory_human:429.01K</span><br><span class="line">used_memory_rss:13897728</span><br><span class="line">used_memory_peak:401776</span><br><span class="line">used_memory_peak_human:392.36K</span><br><span class="line">used_memory_lua:20480</span><br><span class="line">mem_fragmentation_ratio:31.64</span><br><span class="line">mem_allocator:jemalloc-3.0.0</span><br><span class="line"></span><br><span class="line"># Persistence</span><br><span class="line">loading:0</span><br><span class="line">rdb_changes_since_last_save:0</span><br><span class="line">rdb_bgsave_in_progress:0</span><br><span class="line">rdb_last_save_time:1338011402</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line">rdb_last_bgsave_time_sec:-1</span><br><span class="line">rdb_current_bgsave_time_sec:-1</span><br><span class="line">aof_enabled:0</span><br><span class="line">aof_rewrite_in_progress:0</span><br><span class="line">aof_rewrite_scheduled:0</span><br><span class="line">aof_last_rewrite_time_sec:-1</span><br><span class="line">aof_current_rewrite_time_sec:-1</span><br><span class="line"></span><br><span class="line"># Stats</span><br><span class="line">total_connections_received:1</span><br><span class="line">total_commands_processed:0</span><br><span class="line">instantaneous_ops_per_sec:0</span><br><span class="line">rejected_connections:0</span><br><span class="line">expired_keys:0</span><br><span class="line">evicted_keys:0</span><br><span class="line">keyspace_hits:0</span><br><span class="line">keyspace_misses:0</span><br><span class="line">pubsub_channels:0</span><br><span class="line">pubsub_patterns:0</span><br><span class="line">latest_fork_usec:0</span><br><span class="line"></span><br><span class="line"># Replication</span><br><span class="line">role:master</span><br><span class="line">connected_slaves:0</span><br><span class="line"></span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:0.03</span><br><span class="line">used_cpu_user:0.01</span><br><span class="line">used_cpu_sys_children:0.00</span><br><span class="line">used_cpu_user_children:0.00</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Sentinel集群方案--单机版</title>
      <link href="//posts/88fa579a.html"/>
      <url>//posts/88fa579a.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>简单介绍下Redis-sentinel：<br>Redis-sentinel是Redis实例的监控管理、通知和实例失效备援服务，是Redis集群的管理工具。在一般的分布式中心节点数据库中，Redis-sentinel的作用是中心节点的工作，监控各个其他节点的工作情况并且进行故障恢复，来提高集群的高可用性。<br>Sentinel是一个独立于Redis之外的进程，不对外提供key/value服务，存在redis的安装目录下Redis-sentinel。主要用来监控redis-server进程，进行master/slave管理，如果Redis没有运行在master/slave模式下，则不需要设置sentinel。</p></blockquote><p>下面例子中用了3个redis-server和3个redis-sentinel来进行安装演示，实际上redis-sentinel的个数不一定要和redis-sever对应，1~n 个都可以，建议redis-server为偶数个。</p><a id="more"></a><h2 id="部署规划"><a href="#部署规划" class="headerlink" title="部署规划"></a>部署规划</h2><p><strong>注：</strong> 以下各个节点都在同一个服务器中进行演练<br>master:<code>7000</code><br>slave1: <code>7001</code><br>slave2: <code>7002</code><br>master-sentinel: <code>8000</code><br>slave1-sentinel: <code>8001</code><br>slave2-sentinel: <code>8002</code></p><h2 id="下载安装redis"><a href="#下载安装redis" class="headerlink" title="下载安装redis"></a>下载安装redis</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span></span><br><span class="line">wget http://download.redis.io/releases/redis-2.8.3.tar.gz</span><br><span class="line">tar –zxvf redis-2.8.3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> redis-2.8.3</span><br><span class="line">make</span><br><span class="line">make install(此处可用PREFIX参数将redis安装到其他目录)</span><br></pre></td></tr></table></figure><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">mkdir redis_cluster</span><br><span class="line">mkdir redis_cluster/master_7000</span><br><span class="line">mkdir redis_cluster/slave_7001</span><br><span class="line">mkdir redis_cluster/slave_7002</span><br></pre></td></tr></table></figure><h3 id="复制配置文件"><a href="#复制配置文件" class="headerlink" title="复制配置文件"></a>复制配置文件</h3><p>从安装包中复制<code>redis.conf</code>,<code>sentinel.conf</code>配置文件到新建的各个节点目录, 如下: </p><h4 id="复制文件到master目录"><a href="#复制文件到master目录" class="headerlink" title="复制文件到master目录"></a>复制文件到<code>master</code>目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/redis-2.8.3/redis.conf ./redis_cluster/master_7000/</span><br><span class="line">cp ~/redis-2.8.3/sentinel.conf ./redis_cluster/master_7000/sentinel.conf</span><br></pre></td></tr></table></figure><h4 id="复制文件到slave1目录"><a href="#复制文件到slave1目录" class="headerlink" title="复制文件到slave1目录"></a>复制文件到<code>slave1</code>目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/redis-2.8.3/redis.conf ./redis_cluster/slave_7001/</span><br><span class="line">cp ~/redis-2.8.3/sentinel.conf ./redis_cluster/slave_7001/sentinel.conf</span><br></pre></td></tr></table></figure><h4 id="复制文件到slave2目录"><a href="#复制文件到slave2目录" class="headerlink" title="复制文件到slave2目录"></a>复制文件到<code>slave2</code>目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ~/redis-2.8.3/redis.conf ./redis_cluster/slave_7002/</span><br><span class="line">cp ~/redis-2.8.3/sentinel.conf ./redis_cluster/slave_7002/sentinel.conf</span><br></pre></td></tr></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="配置Master节点"><a href="#配置Master节点" class="headerlink" title="配置Master节点"></a>配置Master节点</h4><h5 id="redis-conf"><a href="#redis-conf" class="headerlink" title="redis.conf"></a>redis.conf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_7000.pid</span><br><span class="line">port 7000</span><br><span class="line">requirepass servyou   #从服务器从主服务器同步时的认证密码，如果master设置了，slave密码必须设置，反之master没设置，则slave也无需设置</span><br><span class="line">masterauth  servyou  #设置Redis连接密码,如果配置了连接密码,客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码</span><br><span class="line">appendonly no</span><br><span class="line">slave-read-only yes</span><br></pre></td></tr></table></figure><h5 id="sentinel-conf"><a href="#sentinel-conf" class="headerlink" title="sentinel.conf"></a>sentinel.conf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">logfile &quot;/usr/local/redis_cluster/master_7000/log/sentinel_log.log&quot;</span><br><span class="line">#指定sentinel使用的端口，不能与redis-server运行实例的端口冲突</span><br><span class="line">port 8000 </span><br><span class="line">#指定工作目录</span><br><span class="line">dir /tmp </span><br><span class="line">####sentinel需要监控的master信息：&lt;mastername&gt; &lt;masterIP&gt; &lt;masterPort&gt; &lt;quorum&gt;.</span><br><span class="line">####&lt;quorum&gt;应该小于集群中slave的个数,只有当至少&lt;quorum&gt;个sentinel实例提交&quot;master失效&quot; 才会认为master为ODWON(&quot;客观&quot;失效) .</span><br><span class="line">s</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 7000  2  </span><br><span class="line">#设置访问mymaster的密码</span><br><span class="line">sentinel auth-pass mymaster servyou </span><br><span class="line">#表示如果3s内mymaster没响应，就认为SDOWN</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000 </span><br><span class="line">#表示如果15秒后,mysater仍没活过来，则启动failover，从剩下的slave中选一个升级为master</span><br><span class="line">sentinel failover-timeout mymaster  15000 </span><br><span class="line">#表示如果master重新选出来后，其它slave节点能同时并行从新master同步缓存的台数有多少个，显然该值越大，所有slave节点完成同步切换的整体速度越快，但如果此时正好有人在访问这些slave，可能造成读取失败，影响面会更广。最保定的设置为1，只同一时间，只能有一台干这件事，这样其它slave还能继续服务，但是所有slave全部完成缓存更新同步的进程将变慢。</span><br><span class="line">sentinel parallel-syncs mymaster  1</span><br></pre></td></tr></table></figure><h4 id="配置Slave1节点"><a href="#配置Slave1节点" class="headerlink" title="配置Slave1节点"></a>配置Slave1节点</h4><h5 id="redis-conf-1"><a href="#redis-conf-1" class="headerlink" title="redis.conf"></a>redis.conf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_7001.pid</span><br><span class="line">port 7001</span><br><span class="line">requirepass servyou</span><br><span class="line">masterauth servyou</span><br><span class="line">appendonly no</span><br><span class="line">slave-read-only yes</span><br><span class="line">slave of 127.0.0.1 7000</span><br></pre></td></tr></table></figure><h5 id="sentinel-conf-1"><a href="#sentinel-conf-1" class="headerlink" title="sentinel.conf"></a>sentinel.conf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">logfile &quot;/usr/local/redis_cluster/slave_7001/log/sentinel_log.log&quot;</span><br><span class="line">port 8001</span><br><span class="line">dir /tmp</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 7000 2</span><br><span class="line">sentinel auth-pass mymaster servyou</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster  1</span><br><span class="line">sentinel failover-timeout mymaster  15000</span><br></pre></td></tr></table></figure><h4 id="配置Slave2节点"><a href="#配置Slave2节点" class="headerlink" title="配置Slave2节点"></a>配置Slave2节点</h4><p>配置与<code>Slave1</code>几乎一致</p><h5 id="redis-conf-2"><a href="#redis-conf-2" class="headerlink" title="redis.conf"></a>redis.conf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">pidfile /var/run/redis_7002.pid</span><br><span class="line">port 7002</span><br><span class="line">requirepass servyou</span><br><span class="line">masterauth servyou</span><br><span class="line">appendonly no</span><br><span class="line">slave-read-only yes</span><br><span class="line">slave of 127.0.0.1 7000</span><br></pre></td></tr></table></figure><h5 id="sentinel-conf-2"><a href="#sentinel-conf-2" class="headerlink" title="sentinel.conf"></a>sentinel.conf</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">logfile &quot;/usr/local/redis_cluster/slave_7002/log/sentinel_log.log&quot;</span><br><span class="line">port 8002</span><br><span class="line">dir /tmp</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 7000 2</span><br><span class="line">sentinel auth-pass mymaster servyou</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line">sentinel parallel-syncs mymaster  1</span><br><span class="line">sentinel failover-timeout mymaster  15000</span><br></pre></td></tr></table></figure><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>注意：首次构建sentinel环境时，必须首先启动master。</p><h3 id="启动master和master-sentinel"><a href="#启动master和master-sentinel" class="headerlink" title="启动master和master-sentinel"></a>启动master和master-sentinel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/<span class="built_in">local</span>/redis_cluster/master_7000/redis.conf</span><br><span class="line">redis-sentinel usr/<span class="built_in">local</span>/redis_cluster/master_7000/sentinel.conf</span><br></pre></td></tr></table></figure><h3 id="启动slave1和slave1-sentinel"><a href="#启动slave1和slave1-sentinel" class="headerlink" title="启动slave1和slave1-sentinel"></a>启动slave1和slave1-sentinel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/<span class="built_in">local</span>/redis_cluster/slave_7001/redis.conf</span><br><span class="line">redis-sentinel /usr/<span class="built_in">local</span>/redis_cluster/slave_7001/sentinel.conf</span><br></pre></td></tr></table></figure><h3 id="启动slave2和slave2-sentinel"><a href="#启动slave2和slave2-sentinel" class="headerlink" title="启动slave2和slave2-sentinel"></a>启动slave2和slave2-sentinel</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-server /usr/<span class="built_in">local</span>/redis_cluster/slave_7002/redis.conf</span><br><span class="line">redis-sentinel /usr/<span class="built_in">local</span>/redis_cluster/slave_7002/sentinel.conf</span><br></pre></td></tr></table></figure><h3 id="查看进程"><a href="#查看进程" class="headerlink" title="查看进程"></a>查看进程</h3><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-144135.jpg" alt></p><h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><blockquote><p>info Replication</p></blockquote><h3 id="查看master状态"><a href="#查看master状态" class="headerlink" title="查看master状态"></a>查看master状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 7000</span><br></pre></td></tr></table></figure><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-144330.jpg" alt></p><h3 id="查看slave1状态"><a href="#查看slave1状态" class="headerlink" title="查看slave1状态"></a>查看slave1状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 7001</span><br></pre></td></tr></table></figure><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-144440.jpg" alt></p><h3 id="查看slave2状态"><a href="#查看slave2状态" class="headerlink" title="查看slave2状态"></a>查看slave2状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 7002</span><br></pre></td></tr></table></figure><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-144544.jpg" alt></p><h2 id="场景测试"><a href="#场景测试" class="headerlink" title="场景测试"></a>场景测试</h2><h3 id="场景1-slave宕机"><a href="#场景1-slave宕机" class="headerlink" title="场景1: slave宕机"></a>场景1: slave宕机</h3><p>关闭slave1：<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-144813.jpg" alt><br>查看master的Replication信息：<br>此时只存在一个slave。<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-144908.jpg" alt></p><h3 id="场景2：slave恢复"><a href="#场景2：slave恢复" class="headerlink" title="场景2：slave恢复"></a>场景2：slave恢复</h3><p><a href="#启动slave1和slave1-sentinel">重新开启slave1</a></p><p>查看sentinel状态：<br>sentinel能快速的发现slave加入到集群中：<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-145043.jpg" alt><br>查看master的Replication信息：<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-145130.jpg" alt></p><h3 id="场景3：master宕机"><a href="#场景3：master宕机" class="headerlink" title="场景3：master宕机"></a>场景3：master宕机</h3><p>master-sentinel作为master 1的leader，会选取一个master 1的slave作为新的master。slave的选取是根据一个判断DNS情况的优先级来得到，优先级相同通过runid的排序得到，但目前优先级设定还没实现，所以直接获取runid排序得到slave 1。<br>然后发送命令slaveof no one来取消slave 1的slave状态来转换为master。当其他sentinel观察到该slave成为master后,就知道错误处理例程启动了。sentinel A然后发送给其他slave slaveof new-slave-ip-port 命令，当所有slave都配置完后，sentinel A从监测的masters列表中删除故障master，然后通知其他sentinels。<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-145400.jpg" alt></p><h3 id="场景4：master恢复"><a href="#场景4：master恢复" class="headerlink" title="场景4：master恢复"></a>场景4：master恢复</h3><p><a href="#启动master和master-sentinel">重新启动原来的master</a></p><p>查看sentinel状态：<br>原来的master自动切换成slave，不会自动恢复成master：<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-145730.jpg" alt></p><p>连接到slave2,可以看到目前有两个子节点了<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-15-145803.jpg" alt></p><p>好了, 测试完成!</p><p><strong>注意：若在sentinel已选出新主但尚未完成其它实例的reconfigure之前，重启old master，则整个系统会出现无法选出new master的异常。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Sentinel </tag>
            
            <tag> Redis集群 </tag>
            
            <tag> 哨兵模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij IDEA使用MyBatis-generator自动生成MyBatis代码</title>
      <link href="//posts/bb71e7fb.html"/>
      <url>//posts/bb71e7fb.html</url>
      
        <content type="html"><![CDATA[<h1 id="STEP-1-新增maven插件"><a href="#STEP-1-新增maven插件" class="headerlink" title="STEP 1. 新增maven插件"></a>STEP 1. 新增maven插件</h1><p>在maven项目的pom.xml 添加mybatis-generator-maven-plugin 插件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="STEP-2-新建generatorConfig-xml的配置文件"><a href="#STEP-2-新建generatorConfig-xml的配置文件" class="headerlink" title="STEP 2. 新建generatorConfig.xml的配置文件"></a>STEP 2. 新建generatorConfig.xml的配置文件</h1><p>在maven项目下的src/main/resources 目录下建立名为 generatorConfig.xml的配置文件，作为mybatis-generator-maven-plugin 插件的执行目标，模板如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration  </span></span><br><span class="line"><span class="meta">        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"  </span></span><br><span class="line"><span class="meta">        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!--导入属性配置 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"generator.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">&lt;!--指定特定数据库的jdbc驱动jar包的位置 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">"$&#123;jdbc.driverLocation&#125;"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"default"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!-- optional，旨在创建class时，对注释进行控制 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suppressDate"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!--jdbc的数据库连接 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span> <span class="attr">connectionURL</span>=<span class="string">"$&#123;jdbc.connectionURL&#125;"</span> <span class="attr">userId</span>=<span class="string">"$&#123;jdbc.userId&#125;"</span> <span class="attr">password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类  </span></span><br><span class="line"><span class="comment">            targetPackage     指定生成的model生成所在的包名  </span></span><br><span class="line"><span class="comment">            targetProject     指定在该项目下所在的路径  </span></span><br><span class="line"><span class="comment">        --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"org.louis.hometutor.po"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!-- 是否对model添加 构造函数 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"constructorBased"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 是否允许子包，即targetPackage.schemaName.tableName --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"immutable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 给Model添加一个父类 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rootClass"</span> <span class="attr">value</span>=<span class="string">"com.foo.louis.Hello"</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- 是否对类CHAR类型的列的数据进行trim操作 --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!--Mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"org.louis.hometutor.domain"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">&lt;!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码  </span></span><br><span class="line"><span class="comment">                type="ANNOTATEDMAPPER",生成Java Model 和基于注解的Mapper对象  </span></span><br><span class="line"><span class="comment">                type="MIXEDMAPPER",生成基于注解的Java Model 和相应的Mapper对象  </span></span><br><span class="line"><span class="comment">                type="XMLMAPPER",生成SQLMap XML文件和独立的Mapper接口  </span></span><br><span class="line"><span class="comment">        --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"com.foo.tourist.dao"</span> <span class="attr">targetProject</span>=<span class="string">"src/main/java"</span> <span class="attr">type</span>=<span class="string">"MIXEDMAPPER"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">                    定义Maper.java 源代码中的ByExample() 方法的可视性，可选的值有：  </span></span><br><span class="line"><span class="comment">                    public;  </span></span><br><span class="line"><span class="comment">                    private;  </span></span><br><span class="line"><span class="comment">                    protected;  </span></span><br><span class="line"><span class="comment">                    default  </span></span><br><span class="line"><span class="comment">                    注意：如果 targetRuntime="MyBatis3",此参数被忽略  </span></span><br><span class="line"><span class="comment">             --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exampleMethodVisibility"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span>  </span><br><span class="line">            <span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">                                           方法名计数器  </span></span><br><span class="line"><span class="comment">              Important <span class="doctag">note:</span> this property is ignored if the target runtime is MyBatis3.  </span></span><br><span class="line"><span class="comment">             --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"methodNameCalculator"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">                                                为生成的接口添加父接口 </span></span><br><span class="line"><span class="comment">             --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rootInterface"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"lession"</span> <span class="attr">schema</span>=<span class="string">"louis"</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- optional   , only for mybatis3 runtime  </span></span><br><span class="line"><span class="comment">                 自动生成的键值（identity,或者序列值）  </span></span><br><span class="line"><span class="comment">               如果指定此元素，MBG将会生成&lt;selectKey&gt;元素，然后将此元素插入到SQL Map的&lt;insert&gt; 元素之中  </span></span><br><span class="line"><span class="comment">               sqlStatement 的语句将会返回新的值  </span></span><br><span class="line"><span class="comment">               如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:  </span></span><br><span class="line"><span class="comment">                  Cloudscape    This will translate to: VALUES IDENTITY_VAL_LOCAL()  </span></span><br><span class="line"><span class="comment">                  DB2:      VALUES IDENTITY_VAL_LOCAL()  </span></span><br><span class="line"><span class="comment">                  DB2_MF:       SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1  </span></span><br><span class="line"><span class="comment">                  Derby:        VALUES IDENTITY_VAL_LOCAL()  </span></span><br><span class="line"><span class="comment">                  HSQLDB:   CALL IDENTITY()  </span></span><br><span class="line"><span class="comment">                  Informix:     select dbinfo('sqlca.sqlerrd1') from systables where tabid=1  </span></span><br><span class="line"><span class="comment">                  MySql:        SELECT LAST_INSERT_ID()  </span></span><br><span class="line"><span class="comment">                  SqlServer:    SELECT SCOPE_IDENTITY()  </span></span><br><span class="line"><span class="comment">                  SYBASE:   SELECT @@IDENTITY  </span></span><br><span class="line"><span class="comment">                  JDBC:     This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys. This is a database independent method of obtaining the value from identity columns.  </span></span><br><span class="line"><span class="comment">                  identity: 自增主键  If true, then the column is flagged as an identity column and the generated &lt;selectKey&gt; element will be placed after the insert (for an identity column). If false, then the generated &lt;selectKey&gt; will be placed before the insert (typically for a sequence).  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">            --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">generatedKey</span> <span class="attr">column</span>=<span class="string">""</span> <span class="attr">sqlStatement</span>=<span class="string">""</span> <span class="attr">identity</span>=<span class="string">""</span> <span class="attr">type</span>=<span class="string">""</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- optional.  </span></span><br><span class="line"><span class="comment">                    列的命名规则：  </span></span><br><span class="line"><span class="comment">                    MBG使用 &lt;columnRenamingRule&gt; 元素在计算列名的对应 名称之前，先对列名进行重命名，  </span></span><br><span class="line"><span class="comment">                    作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤  </span></span><br><span class="line"><span class="comment">                    支持正在表达式  </span></span><br><span class="line"><span class="comment">                     searchString 表示要被换掉的字符串  </span></span><br><span class="line"><span class="comment">                     replaceString 则是要换成的字符串，默认情况下为空字符串，可选  </span></span><br><span class="line"><span class="comment">            --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">columnRenamingRule</span> <span class="attr">searchString</span>=<span class="string">""</span> <span class="attr">replaceString</span>=<span class="string">""</span>/&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!-- optional.告诉 MBG 忽略某一列  </span></span><br><span class="line"><span class="comment">                    column，需要忽略的列  </span></span><br><span class="line"><span class="comment">                    delimitedColumnName:true ,匹配column的值和数据库列的名称 大小写完全匹配，false 忽略大小写匹配  </span></span><br><span class="line"><span class="comment">                    是否限定表的列名，即固定表列在Model中的名称  </span></span><br><span class="line"><span class="comment">            --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">ignoreColumn</span> <span class="attr">column</span>=<span class="string">"PLAN_ID"</span>  <span class="attr">delimitedColumnName</span>=<span class="string">"true"</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">&lt;!--optional.覆盖MBG对Model 的生成规则  </span></span><br><span class="line"><span class="comment">                 column: 数据库的列名  </span></span><br><span class="line"><span class="comment">                 javaType: 对应的Java数据类型的完全限定名  </span></span><br><span class="line"><span class="comment">                 在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary to handle "odd" database types (e.g. MySql's unsigned bigint type should be mapped to java.lang.Object).  </span></span><br><span class="line"><span class="comment">                 jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，对某些数据库而言，对于处理特定的JDBC 驱动癖好 很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).  </span></span><br><span class="line"><span class="comment">                 typeHandler:  </span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">            --&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">columnOverride</span> <span class="attr">column</span>=<span class="string">""</span> <span class="attr">javaType</span>=<span class="string">""</span>    <span class="attr">jdbcType</span>=<span class="string">""</span> <span class="attr">typeHandler</span>=<span class="string">""</span>  <span class="attr">delimitedColumnName</span>=<span class="string">""</span> /&gt;</span>  </span><br><span class="line">  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="配置文件generator-properties属性文件"><a href="#配置文件generator-properties属性文件" class="headerlink" title="配置文件generator.properties属性文件"></a>配置文件generator.properties属性文件</h2><p>这里使用了外置的配置文件generator.properties，可以将一下属性配置到properties文件之中，增加配置的灵活性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverLocation=D:\\maven\\com\\oracle\\ojdbc14\\10.2.0.4.0\\ojdbc14-10.2.0.4.0.jar  </span><br><span class="line">jdbc.driverClass=oracle.jdbc.driver.OracleDriver  </span><br><span class="line">jdbc.connectionURL=jdbc:oracle:thin:@//localhost:1521/XE  </span><br><span class="line">jdbc.userId=LOUIS  </span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure></p><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-12-%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%8717_9_12_%E4%B8%8B%E5%8D%882_38.jpg" alt></p><h1 id="STEP-3-新增maven运行选项"><a href="#STEP-3-新增maven运行选项" class="headerlink" title="STEP 3. 新增maven运行选项"></a>STEP 3. 新增maven运行选项</h1><p>在Intellij IDEA添加一个“Run运行”选项，使用maven运行mybatis-generator-maven-plugin插件 ：<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-12-%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%8717_9_12_%E4%B8%8B%E5%8D%882_39.jpg" alt="步骤1"></p><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-12-%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%8717_9_12_%E4%B8%8B%E5%8D%882_40-1.jpg" alt="步骤2"></p><p>之后弹出运行配置框，为当前配置配置一个名称，这里其名为”generator”,然后在 “Command line” 选项中输入“<code>mybatis-generator:generate  -e</code>”</p><p>这里加了“-e ”选项是为了让该插件输出详细信息，这样可以帮助我们定位问题。<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-12-061534.jpg" alt="步骤3"></p><p><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-12-061541.jpg" alt="步骤4"></p><p>如果添加成功，则会在run 选项中有“generator” 选项，如下：<br><img src="http://ow1k5uxqk.bkt.clouddn.com/2017-09-12-%E7%B2%98%E8%B4%B4%E7%9A%84%E5%9B%BE%E7%89%8717_9_12_%E4%B8%8B%E5%8D%882_41-1.jpg" alt="步骤5"></p><p>点击运行，然后不出意外的话，会在控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">C:\Java\jdk1.7.0_71\bin\java -Dmaven.home=D:\software\apache-maven-3.0.5-bin -Dclassworlds.conf=D:\software\apache-maven-3.0.5-bin\bin\m2.conf -Didea.launcher.port=7533 &quot;-Didea.launcher.bin.path=D:\applications\JetBrains\IntelliJ IDEA 14.0.2\bin&quot; -Dfile.encoding=UTF-8 -classpath &quot;D:\software\apache-maven-3.0.5-bin\boot\plexus-classworlds-2.4.jar;D:\applications\JetBrains\IntelliJ IDEA 14.0.2\lib\idea_rt.jar&quot; com.intellij.rt.execution.application.AppMain org.codehaus.classworlds.Launcher -Didea.version=14.0.2 -s D:\software\apache-maven-3.0.5-bin\conf\settings.xml mybatis-generator:generate -e  </span><br><span class="line">[INFO] Error stacktraces are turned on.  </span><br><span class="line">[INFO] Scanning for projects...  </span><br><span class="line">[INFO]                                                                           </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">[INFO] Building hometutor Maven Webapp 1.0-SNAPSHOT  </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">[INFO]   </span><br><span class="line">[INFO] --- mybatis-generator-maven-plugin:1.3.2:generate (default-cli) @ hometutor ---  </span><br><span class="line">[INFO] Connecting to the Database  </span><br><span class="line">[INFO] Introspecting table louis.lession  </span><br><span class="line">log4j:WARN No appenders could be found for logger (org.mybatis.generator.internal.db.DatabaseIntrospector).  </span><br><span class="line">log4j:WARN Please initialize the log4j system properly.  </span><br><span class="line">log4j:WARN See http://logging.apache.org/log4j/1.2/faq.html#noconfig for more info.  </span><br><span class="line">[INFO] Generating Example class for table LOUIS.LESSION  </span><br><span class="line">[INFO] Generating Record class for table LOUIS.LESSION  </span><br><span class="line">[INFO] Generating Mapper Interface for table LOUIS.LESSION  </span><br><span class="line">[INFO] Generating SQL Map for table LOUIS.LESSION  </span><br><span class="line">[INFO] Saving file LessionMapper.xml  </span><br><span class="line">[INFO] Saving file LessionExample.java  </span><br><span class="line">[INFO] Saving file Lession.java  </span><br><span class="line">[INFO] Saving file LessionMapper.java  </span><br><span class="line">[WARNING] Root class com.foo.louis.Hello cannot be loaded, checking for member overrides is disabled for this class   </span><br><span class="line">[WARNING] Existing file E:\sources\tutor\src\main\java\org\louis\hometutor\po\Lession.java was overwritten  </span><br><span class="line">[WARNING] Existing file E:\sources\tutor\src\main\java\com\foo\tourist\dao\LessionMapper.java was overwritten  </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">[INFO] BUILD SUCCESS  </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">[INFO] Total time: 2.334s  </span><br><span class="line">[INFO] Finished at: Tue Jan 27 12:04:08 CST 2015  </span><br><span class="line">[INFO] Final Memory: 8M/107M  </span><br><span class="line">[INFO] ------------------------------------------------------------------------  </span><br><span class="line">  </span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><p>好，看到BUILD SUCCESS，则大功告成，如果有错误的话，由于添加了-e 选项，会把具体的详细错误信息打印出来的，根据错误信息修改即可</p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> Maven </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis配置以及常规操作类封装</title>
      <link href="//posts/66a772a9.html"/>
      <url>//posts/66a772a9.html</url>
      
        <content type="html"><![CDATA[<p>直接上代码吧!!</p><h2 id="抽象基础类"><a href="#抽象基础类" class="headerlink" title="抽象基础类"></a>抽象基础类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBaseRedis</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> RedisTemplate&lt;K, V&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置redisTemplate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> redisTemplate the redisTemplate to set</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate&lt;K, V&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取 String  RedisSerializer</span></span><br><span class="line"><span class="comment">     * &lt;br&gt;------------------------------&lt;br&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> RedisSerializer&lt;String&gt; <span class="title">getStringSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getStringSerializer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="JsonMapper"><a href="#JsonMapper" class="headerlink" title="JsonMapper"></a>JsonMapper</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.TimeZone;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringEscapeUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonInclude.Include;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonParser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.DeserializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JsonSerializer;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializerProvider;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.<span class="keyword">module</span>.SimpleModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.util.JSONPObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonMapper</span> <span class="keyword">extends</span> <span class="title">ObjectMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger LOGGER = LoggerFactory.getLogger(JsonMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JsonMapper mapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Include.NON_EMPTY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonMapper</span><span class="params">(Include include)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 设置输出时包含属性的风格</span></span><br><span class="line">        <span class="keyword">if</span> (include != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setSerializationInclusion(include);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置输入时忽略在JSON字符串中存在但Java对象实际没有的属性</span></span><br><span class="line">        <span class="keyword">this</span>.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);</span><br><span class="line">        <span class="comment">// 空值处理为空串</span></span><br><span class="line">        <span class="keyword">this</span>.getSerializerProvider().setNullValueSerializer(<span class="keyword">new</span> JsonSerializer&lt;Object&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(Object value, JsonGenerator jgen,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  SerializerProvider provider)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">                    JsonProcessingException </span>&#123;</span><br><span class="line">                jgen.writeString(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 进行HTML解码。</span></span><br><span class="line">        <span class="keyword">this</span>.registerModule(<span class="keyword">new</span> SimpleModule().addSerializer(String.class, <span class="keyword">new</span> JsonSerializer&lt;String&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(String value, JsonGenerator jgen,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  SerializerProvider provider)</span> <span class="keyword">throws</span> IOException,</span></span><br><span class="line"><span class="function">                    JsonProcessingException </span>&#123;</span><br><span class="line">                jgen.writeString(StringEscapeUtils.unescapeHtml4(value));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="comment">// 设置时区</span></span><br><span class="line">        <span class="keyword">this</span>.setTimeZone(TimeZone.getDefault());<span class="comment">//getTimeZone("GMT+8:00")</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建只输出非Null且非Empty(如List.isEmpty)的属性到Json字符串的Mapper,建议在外部接口中使用.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JsonMapper <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mapper == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mapper = <span class="keyword">new</span> JsonMapper().enableSimple();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建只输出初始值被改变的属性到Json字符串的Mapper, 最节约的存储方式，建议在内部接口中使用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> JsonMapper <span class="title">nonDefaultMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mapper == <span class="keyword">null</span>)&#123;</span><br><span class="line">            mapper = <span class="keyword">new</span> JsonMapper(Include.NON_DEFAULT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Object可以是POJO，也可以是Collection或数组。</span></span><br><span class="line"><span class="comment">     * 如果对象为Null, 返回"null".</span></span><br><span class="line"><span class="comment">     * 如果集合为空集合, 返回"[]".</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">if</span>(LOGGER.isWarnEnabled())&#123;</span><br><span class="line">                LOGGER.warn(<span class="string">"write to json string error:"</span> + object, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化POJO或简单Collection如List&lt;String&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如果JSON字符串为Null或"null"字符串, 返回Null.</span></span><br><span class="line"><span class="comment">     * 如果JSON字符串为"[]", 返回空集合.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 如需反序列化复杂Collection如List&lt;MyBean&gt;, 请使用fromJson(String,JavaType)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #fromJson(String, JavaType)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String jsonString, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(jsonString)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.readValue(jsonString, clazz);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">if</span>(LOGGER.isWarnEnabled())&#123;</span><br><span class="line">                LOGGER.warn(<span class="string">"parse json string error:"</span> + jsonString, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化复杂Collection如List&lt;Bean&gt;, 先使用函數createCollectionType构造类型,然后调用本函数.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #createCollectionType(Class, Class...)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String jsonString, JavaType javaType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(jsonString)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">this</span>.readValue(jsonString, javaType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">if</span>(LOGGER.isWarnEnabled())&#123;</span><br><span class="line">                LOGGER.warn(<span class="string">"parse json string error:"</span> + jsonString, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 構造泛型的Collection Type如:</span></span><br><span class="line"><span class="comment">     * ArrayList&lt;MyBean&gt;, 则调用constructCollectionType(ArrayList.class,MyBean.class)</span></span><br><span class="line"><span class="comment">     * HashMap&lt;String,MyBean&gt;, 则调用(HashMap.class,String.class, MyBean.class)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JavaType <span class="title">createCollectionType</span><span class="params">(Class&lt;?&gt; collectionClass, Class&lt;?&gt;... elementClasses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getTypeFactory().constructParametricType(collectionClass, elementClasses);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 當JSON裡只含有Bean的部分屬性時，更新一個已存在Bean，只覆蓋該部分的屬性.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">update</span><span class="params">(String jsonString, T object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) <span class="keyword">this</span>.readerForUpdating(object).readValue(jsonString);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            <span class="keyword">if</span>(LOGGER.isWarnEnabled())&#123;</span><br><span class="line">                LOGGER.warn(<span class="string">"update json string:"</span> + jsonString + <span class="string">" to object:"</span> + object + <span class="string">" error."</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">if</span>(LOGGER.isWarnEnabled())&#123;</span><br><span class="line">                LOGGER.warn(<span class="string">"update json string:"</span> + jsonString + <span class="string">" to object:"</span> + object + <span class="string">" error."</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 輸出JSONP格式數據.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toJsonP</span><span class="params">(String functionName, Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> toJson(<span class="keyword">new</span> JSONPObject(functionName, object));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 設定是否使用Enum的toString函數來讀寫Enum,</span></span><br><span class="line"><span class="comment">     * 為False時時使用Enum的name()函數來讀寫Enum, 默認為False.</span></span><br><span class="line"><span class="comment">     * 注意本函數一定要在Mapper創建後, 所有的讀寫動作之前調用.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonMapper <span class="title">enableEnumUseToString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);</span><br><span class="line">        <span class="keyword">this</span>.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许单引号</span></span><br><span class="line"><span class="comment">     * 允许不带引号的字段名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonMapper <span class="title">enableSimple</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.configure(Feature.ALLOW_SINGLE_QUOTES, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.configure(Feature.ALLOW_UNQUOTED_FIELD_NAMES, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取出Mapper做进一步的设置或使用其他序列化API.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMapper <span class="title">getMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象转换为JSON字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJsonString</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonMapper.getInstance().toJson(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JSON字符串转换为对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonString</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">fromJsonString</span><span class="params">(String jsonString, Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonMapper.getInstance().fromJson(jsonString, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将obj对象转换成 class类型的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">parseObject</span><span class="params">(Object obj, Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(JSON.toJSONString(obj), clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.SerializationException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by SIVEN on 17/9/4.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonRedisSeriaziler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String EMPTY_JSON = <span class="string">"&#123;&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Charset DEFAULT_CHARSET = Charset.forName(<span class="string">"UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JsonRedisSeriaziler</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * java-object as json-string</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">seriazileAsString</span><span class="params">(Object object)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object== <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> EMPTY_JSON;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.objectMapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Could not write JSON: "</span> + ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * json-string to java-object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">deserializeAsObject</span><span class="params">(String str,Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="keyword">null</span> || clazz == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.objectMapper.readValue(str, clazz);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Could not write JSON: "</span> + ex.getMessage(), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RedisClient"><a href="#RedisClient" class="headerlink" title="RedisClient"></a>RedisClient</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.DataAccessException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.BoundHashOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.ValueOperations;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisClient</span> <span class="keyword">extends</span> <span class="title">AbstractBaseRedis</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 根据key精确匹配删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String... key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key!=<span class="keyword">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(key.length == <span class="number">1</span>)&#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                redisTemplate.delete(CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * （该操作会执行模糊查询，请尽量不要使用，以免影响性能或误删）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">batchDel</span><span class="params">(String... pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (String kp : pattern) &#123;</span><br><span class="line">            redisTemplate.delete(redisTemplate.keys(kp + <span class="string">"*"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得缓存（int型）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getInt</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        String value = stringRedisTemplate.boundValueOps(key).get();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(value))&#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得缓存（字符串类型）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate.boundValueOps(key).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 取得缓存（字符串类型）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">(String key, <span class="keyword">boolean</span> retain)</span></span>&#123;</span><br><span class="line">        String value = stringRedisTemplate.boundValueOps(key).get();</span><br><span class="line">        <span class="keyword">if</span>(!retain)&#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 注：基本数据类型(Character除外)，请直接使用get(String key, Class&lt;T&gt; clazz)取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObj</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.boundValueOps(key).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 注：java 8种基本类型的数据请直接使用get(String key, Class&lt;T&gt; clazz)取值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> retain    是否保留</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObj</span><span class="params">(String key, <span class="keyword">boolean</span> retain)</span></span>&#123;</span><br><span class="line">        Object obj = redisTemplate.boundValueOps(key).get();</span><br><span class="line">        <span class="keyword">if</span>(!retain)&#123;</span><br><span class="line">            redisTemplate.delete(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * 注：该方法暂不支持Character数据类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String key, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)redisTemplate.boundValueOps(key).get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存json对象&lt;br&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getJson</span><span class="params">(String key, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JsonMapper.fromJsonString(stringRedisTemplate.boundValueOps(key).get(), clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将value对象写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 失效时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String key,Object value,Long time)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(value.getClass().equals(String.class))&#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, value.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value.getClass().equals(Integer.class))&#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, value.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value.getClass().equals(Double.class))&#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, value.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value.getClass().equals(Float.class))&#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, value.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value.getClass().equals(Short.class))&#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, value.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value.getClass().equals(Long.class))&#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, value.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(value.getClass().equals(Boolean.class))&#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, value.toString());</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将value对象以JSON格式写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 失效时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJson</span><span class="params">(String key,Object value,Long time)</span></span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JsonMapper.toJsonString(value));</span><br><span class="line">        <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringRedisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新key对象field的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   缓存key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field 缓存对象field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 缓存对象field值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJsonField</span><span class="params">(String key, String field, String value)</span></span>&#123;</span><br><span class="line">        JSONObject obj = JSON.parseObject(stringRedisTemplate.boundValueOps(key).get());</span><br><span class="line">        obj.put(field, value);</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, obj.toJSONString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">decr</span><span class="params">(String key, <span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">incr</span><span class="params">(String key, <span class="keyword">double</span> by)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, by);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取double类型值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getDouble</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String value = stringRedisTemplate.boundValueOps(key).get();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(value))&#123;</span><br><span class="line">            <span class="keyword">return</span> Double.valueOf(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置double类型值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 失效时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDouble</span><span class="params">(String key, <span class="keyword">double</span> value, Long time)</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, String.valueOf(value));</span><br><span class="line">        <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringRedisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置double类型值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 失效时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInt</span><span class="params">(String key, <span class="keyword">int</span> value, Long time)</span> </span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, String.valueOf(value));</span><br><span class="line">        <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringRedisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将map写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 失效时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setMap</span><span class="params">(String key, Map&lt;String, T&gt; map, Long time)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将map写入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 失效时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setMap</span><span class="params">(String key, T obj, Long time)</span></span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = (Map&lt;String, String&gt;)JsonMapper.parseObject(obj, Map.class);</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向key对应的map中添加缓存对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addMap</span><span class="params">(String key, Map&lt;String, T&gt; map)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向key对应的map中添加缓存对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   cache对象key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field map对应的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value     值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addMap</span><span class="params">(String key, String field, String value)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, field, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向key对应的map中添加缓存对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   cache对象key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field map对应的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj   对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">addMap</span><span class="params">(String key, String field, T obj)</span></span>&#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, field, obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取map缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Map&lt;String, T&gt; <span class="title">mget</span><span class="params">(String key, Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        BoundHashOperations&lt;String, String, T&gt; boundHashOperations = redisTemplate.boundHashOps(key);</span><br><span class="line">        <span class="keyword">return</span> boundHashOperations.entries();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取map缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMap</span><span class="params">(String key, Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        BoundHashOperations&lt;String, String, String&gt; boundHashOperations = redisTemplate.boundHashOps(key);</span><br><span class="line">        Map&lt;String, String&gt; map = boundHashOperations.entries();</span><br><span class="line">        <span class="keyword">return</span> JsonMapper.parseObject(map, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取map缓存中的某个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapField</span><span class="params">(String key, String field, Class&lt;T&gt; clazz)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)redisTemplate.boundHashOps(key).get(field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除map中的某个对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> lh</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2016年8月10日</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   map对应的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field map中该对象的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delMapField</span><span class="params">(String key, String... field)</span></span>&#123;</span><br><span class="line">        BoundHashOperations&lt;String, String, ?&gt; boundHashOperations = redisTemplate.boundHashOps(key);</span><br><span class="line">        boundHashOperations.delete(field);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存的失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> FangJun</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2016年8月14日</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存KEY</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 失效时间(秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">expire</span><span class="params">(String key, Long time)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sadd</span><span class="params">(String key, String... value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.boundSetOps(key).add(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除set集合中的对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">srem</span><span class="params">(String key, String... value)</span> </span>&#123;</span><br><span class="line">        redisTemplate.boundSetOps(key).remove(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * set重命名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldkey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newkey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">srename</span><span class="params">(String oldkey, String newkey)</span></span>&#123;</span><br><span class="line">        redisTemplate.boundSetOps(oldkey).rename(newkey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> fxl</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span> 2016年9月11日</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIntForPhone</span><span class="params">(String key,Object value,<span class="keyword">int</span> time)</span></span>&#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JsonMapper.toJsonString(value));</span><br><span class="line">        <span class="keyword">if</span>(time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringRedisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询keys</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">keys</span><span class="params">(String pattern)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.keys(pattern);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="redis-xml文件配置"><a href="#redis-xml文件配置" class="headerlink" title="redis xml文件配置"></a>redis xml文件配置</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">default-lazy-init</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Jedis Config<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:config/application-jedis.properties"</span> <span class="attr">ignore-unresolvable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 连接池配置. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池中最大连接数。高版本：maxTotal，低版本：maxActive --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxTotal"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxTotal&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池中最大空闲的连接数. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxIdle&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池中最少空闲的连接数. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.minIdle&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 当连接池资源耗尽时，调用者最大阻塞的时间，超时将跑出异常。单位，毫秒数;默认为-1.表示永不超时。高版本：maxWaitMillis，低版本：maxWait --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWaitMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.maxWaitMillis&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接空闲的最小时间，达到此值后空闲连接将可能会被移除。负值(-1)表示不移除. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.minEvictableIdleTimeMillis&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对于“空闲链接”检测线程而言，每次检测的链接资源的个数。默认为3 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"numTestsPerEvictionRun"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.numTestsPerEvictionRun&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- “空闲链接”检测线程，检测的周期，毫秒数。如果为负值，表示不运行“检测线程”。默认为-1. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.timeBetweenEvictionRunsMillis&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- testOnBorrow:向调用者输出“链接”资源时，是否检测是有有效，如果无效则从连接池中移除，并尝试获取继续获取。默认为false。建议保持默认值. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.testOnBorrow&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- testOnReturn:向连接池“归还”链接时，是否检测“链接”对象的有效性。默认为false。建议保持默认值.--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.testOnReturn&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- testWhileIdle:向调用者输出“链接”对象时，是否检测它的空闲超时；默认为false。如果“链接”空闲超时，将会被移除。建议保持默认值. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- whenExhaustedAction:当“连接池”中active数量达到阀值时，即“链接”资源耗尽时，连接池需要采取的手段, 默认为1(0:抛出异常。1:阻塞，直到有可用链接资源。2:强制创建新的链接资源) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring提供的Redis连接工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">"destroy"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池配置. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolConfig"</span> <span class="attr">ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Redis服务主机. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hostName"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.hostName&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Redis服务端口号. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.port&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Redis服务连接密码. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连超时设置. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeout"</span> <span class="attr">value</span>=<span class="string">"$&#123;redis.timeout&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 是否使用连接池. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usePool"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- key序列化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringRedisSerializer"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringRedisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.StringRedisTemplate"</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring提供的访问Redis类. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.RedisTemplate"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"jedisConnectionFactory"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"keySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashKeySerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.StringRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"valueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashValueSerializer"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置缓存 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cacheManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.cache.RedisCacheManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"redisTemplate"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisClient"</span> <span class="attr">class</span>=<span class="string">"cn.com.servyou.gzyjzx.frame.redis.RedisClient"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用AOP 实现Redis缓存注解，支持SPEL</title>
      <link href="//posts/e9084a5f.html"/>
      <url>//posts/e9084a5f.html</url>
      
        <content type="html"><![CDATA[<p>公司项目对Redis使用比较多，因为之前没有做AOP，所以缓存逻辑和业务逻辑交织在一起，维护比较艰难<br>所以最近实现了针对于Redis的@Cacheable，把缓存的对象依照类别分别存放到redis的Hash中，对于key也实现了SPEL支持。</p><h2 id="定义缓存注解"><a href="#定义缓存注解" class="headerlink" title="定义缓存注解"></a>定义缓存注解</h2><p>创建注解，其实大部分数据都是以hash形式存储的（使的key易于管理），所以，注解中定义了fieldKey，用作Hash的field。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据缓存注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataCacheable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">cacheName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;<span class="comment">//缓存的名称, 默认取(类名 + 方法名)</span></span><br><span class="line">    String[] fieldKey() ;<span class="comment">//缓存的字段Key, 使用SPEL支持, 如:#userName</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">expireTime</span><span class="params">()</span> <span class="keyword">default</span> 0</span>; <span class="comment">//过期时效(秒) [-1永不过期]</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="定义切面-定义PointCut"><a href="#定义切面-定义PointCut" class="headerlink" title="定义切面,定义PointCut"></a>定义切面,定义PointCut</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.Signature;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据缓存切面处理</span></span><br><span class="line"><span class="comment"> * http://www.cnblogs.com/DajiangDev/p/3770894.html</span></span><br><span class="line"><span class="comment"> * Created by SIVEN on 17/9/1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataCacheableAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可控的线程池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;config['redis.cache.time']&#125;"</span>)</span><br><span class="line">    Long DEFAULT_CACHE_TIME = <span class="number">600L</span>; <span class="comment">//默认10分钟</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;config['redis.cache.enable']&#125;"</span>)</span><br><span class="line">    <span class="keyword">boolean</span> REDIS_CACHE_ENABLE;<span class="comment">//启用缓存开关</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisClient redisClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 控制业务执行</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* gov.etax.dzswj.nsrzx.services..service..*.*(..)) &amp;&amp; @annotation(gov.etax.dzswj.nsrzx.component.cache.annotation.DataCacheable)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!REDIS_CACHE_ENABLE) &#123;</span><br><span class="line">            logger.debug(<span class="string">"缓存开关 &gt;&gt; [禁用]"</span>);</span><br><span class="line">            <span class="keyword">return</span> pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Method method = getMethod(pjp);</span><br><span class="line">        DataCacheable cacheable = method.getAnnotation(DataCacheable.class);</span><br><span class="line">        String hashKey = getHashKey(pjp, cacheable);</span><br><span class="line">        String fieldKey = parseKey(cacheable.fieldKey(), method, pjp.getArgs());</span><br><span class="line">        <span class="keyword">long</span> expireTime = cacheable.expireTime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取方法的返回类型,让缓存可以返回正确的类型</span></span><br><span class="line">        Class returnType = ((MethodSignature) pjp.getSignature()).getReturnType();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用redis 的hash进行存取，易于管理</span></span><br><span class="line">        Object result = redisClient.getMapField(hashKey, fieldKey, returnType);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            logger.debug(<span class="string">"DataCacheableAspect: doAround() 查找缓存不为空, 返回缓存数据"</span>);</span><br><span class="line">            setExpireTime(hashKey, expireTime);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">        result = pjp.proceed();</span><br><span class="line">        <span class="comment">//后置处理, 将业务数据加入到缓存中</span></span><br><span class="line">        doAfterReturning(hashKey, fieldKey, cacheable.expireTime(), result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置处理方法 (写入缓存)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAfterReturning</span><span class="params">(<span class="keyword">final</span> String hashKey, <span class="keyword">final</span> String fieldKey, <span class="keyword">final</span> Long expireTime, <span class="keyword">final</span> Object result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//线程处理</span></span><br><span class="line">        fixedThreadPool.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                logger.debug(<span class="string">"DataCacheableAspect: doAfterReturning() 业务处理完毕, 异步将数据或写入缓存中.."</span>);</span><br><span class="line">                <span class="comment">//加入缓存</span></span><br><span class="line">                redisClient.addMap(hashKey, fieldKey, result);</span><br><span class="line">                <span class="comment">//设置失效时长</span></span><br><span class="line">                setExpireTime(hashKey, expireTime);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> hashKey</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setExpireTime</span><span class="params">(<span class="keyword">final</span> String hashKey, Long expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置失效时长</span></span><br><span class="line">        Long cacheTime = expireTime;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == expireTime) &#123;</span><br><span class="line">            cacheTime = DEFAULT_CACHE_TIME;</span><br><span class="line">        &#125;</span><br><span class="line">        redisClient.expire(hashKey, cacheTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取被拦截方法对象</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * MethodSignature.getMethod() 获取的是顶层接口或者父类的方法对象</span></span><br><span class="line"><span class="comment">     * 而缓存的注解在实现类的方法上</span></span><br><span class="line"><span class="comment">     * 所以应该使用反射获取当前对象的方法对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Method <span class="title">getMethod</span><span class="params">(JoinPoint pjp)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取参数的类型</span></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        Class[] argTypes = <span class="keyword">new</span> Class[pjp.getArgs().length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            argTypes[i] = args[i].getClass();</span><br><span class="line">        &#125;</span><br><span class="line">        Method method = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method = pjp.getTarget().getClass().getMethod(pjp.getSignature().getName(), argTypes);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存Hash Key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cacheable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> point</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getHashKey</span><span class="params">(JoinPoint point, DataCacheable cacheable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringHelper.isNotEmpty(cacheable.cacheName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> cacheable.cacheName();</span><br><span class="line">        &#125;</span><br><span class="line">        Signature signature = point.getSignature();</span><br><span class="line">        <span class="keyword">return</span> signature.getDeclaringTypeName() + <span class="string">"."</span> + signature.getName();<span class="comment">//类名 + 方法名</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取缓存的key</span></span><br><span class="line"><span class="comment">     * key 定义在注解上，支持SPEL表达式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">parseKey</span><span class="params">(String[] keys, Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取被拦截方法参数名列表(使用Spring支持类库)</span></span><br><span class="line">        LocalVariableTableParameterNameDiscoverer u =</span><br><span class="line">                <span class="keyword">new</span> LocalVariableTableParameterNameDiscoverer();</span><br><span class="line">        String[] paraNameArr = u.getParameterNames(method);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用SPEL进行key的解析</span></span><br><span class="line">        ExpressionParser parser = <span class="keyword">new</span> SpelExpressionParser();</span><br><span class="line">        <span class="comment">//SPEL上下文</span></span><br><span class="line">        StandardEvaluationContext context = <span class="keyword">new</span> StandardEvaluationContext();</span><br><span class="line">        <span class="comment">//把方法参数放入SPEL上下文中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paraNameArr.length; i++) &#123;</span><br><span class="line">            context.setVariable(paraNameArr[i], args[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuffer parseKeyBuff = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            parseKeyBuff.append(<span class="string">"_"</span>).append(parser.parseExpression(key).getValue(context, String.class));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseKeyBuff.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RedisClient相关封装"><a href="#RedisClient相关封装" class="headerlink" title="RedisClient相关封装"></a>RedisClient相关封装</h2><p>参见文章<a href="http://blog.siven.net/2017/09/10/Redis配置%20&amp;%20常规操作类封装/">Redis配置 &amp; 常规操作类封装</a></p><h2 id="AOP配置"><a href="#AOP配置" class="headerlink" title="AOP配置"></a>AOP配置</h2><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NsrxxServiceImpl</span> <span class="keyword">implements</span> <span class="title">INsrxxService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@DataCacheable</span>(fieldKey = <span class="string">"#dto.queryObj.djxh"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDto&lt;NsrxxDto&gt; <span class="title">queryNsrxxByDjxh</span><span class="params">(QueryDto&lt;QueryByDjxh&gt; dto)</span> </span>&#123;</span><br><span class="line">        INsrxxMapper mapper = SessionTemplateUtil.getMapper(INsrxxMapper.class);</span><br><span class="line">        <span class="keyword">return</span> ResultDtoHelper.success(mapper.queryNsrxxByDjxh(dto.getQueryObj()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Redis </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea无法下载依赖包的source,使用maven下载source</title>
      <link href="//posts/dc4851bc.html"/>
      <url>//posts/dc4851bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>使用Idea时，想查看依赖包的源码，但出现无法下载的提示：</p><blockquote><p>idea Sources for ‘spring-context-4.3.2.RELEASE.jar’ not found</p></blockquote><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><p>使用Maven命令。经过测试，好用。下载了所有POM里的依赖包的source，这点不是想要的，原来只想下载想看的依赖的source。参考：IDEA-165800 Can’t download dependency’s source code<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:resolve -Dclassifier=sources</span><br></pre></td></tr></table></figure></p><h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>1.下载POM文件依赖的包的source<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:sources</span><br></pre></td></tr></table></figure></p><p>2.下载POM文件依赖的包的javadoce<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:resolve -Dclassifier=javadoc</span><br></pre></td></tr></table></figure></p><p>3.下载指定依赖包（artifactId）的source。这个很不错，是我想要的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn dependency:sources -DincludeArtifactIds=guava</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://stackoverflow.com/questions/2059431/get-source-jars-from-maven-repository" target="_blank" rel="noopener">Get source JARs from Maven repository</a>　 </p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring通过ApplicationContext主动获取bean</title>
      <link href="//posts/ac836b44.html"/>
      <url>//posts/ac836b44.html</url>
      
        <content type="html"><![CDATA[<p>最近在做项目的时候我发现一个问题：Spring的IOC容器不能在Web中被引用(或者说不能被任意地引用)。我们在配置文件中让Spring自动装配，但并没有留住ApplicationContext的实例。我们如果希望在我们的项目中任何位置都能拿到同一个ApplicationContext来获取IOC容器中的资源，就要让Spring将上下文环境填充到我们能获取的地方，比如下面的做法：</p><ul><li>方法一: 实现自ApplicationContextAware接口</li><li>方法二，使用了注解和静态化的方式来产生SpringFactory对象</li></ul><a id="more"></a><h1 id="方法一-实现自ApplicationContextAware接口"><a href="#方法一-实现自ApplicationContextAware接口" class="headerlink" title="方法一: 实现自ApplicationContextAware接口"></a>方法一: 实现自ApplicationContextAware接口</h1><p>自定义一个工具类，实现自ApplicationContextAware接口，接口的方法是setApplicationContext，我们实现它，并让其为我们服务，因为Spring在load自己的时候会将上下文环境填充进来。我们所要做的就是将得到的ApplicationContext保存下来用。</p><h2 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;  </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContextAware;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 实现ApplicationContextAware接口的context注入函数, 将其存入静态变量. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;  </span><br><span class="line">        SpringContextUtil.applicationContext = applicationContext; <span class="comment">// NOSONAR  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 取得存储在静态变量中的ApplicationContext. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        checkApplicationContext();  </span><br><span class="line">        <span class="keyword">return</span> applicationContext;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 从静态变量ApplicationContext中取得Bean, 自动转型为所赋值对象的类型. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        checkApplicationContext();  </span><br><span class="line">        <span class="keyword">return</span> (T) applicationContext.getBean(name);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 从静态变量ApplicationContext中取得Bean, 自动转型为所赋值对象的类型. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;  </span><br><span class="line">        checkApplicationContext();  </span><br><span class="line">        <span class="keyword">return</span> (T) applicationContext.getBeansOfType(clazz);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 清除applicationContext静态变量. </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cleanApplicationContext</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        applicationContext = <span class="keyword">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkApplicationContext</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (applicationContext == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"applicaitonContext未注入,请在applicationContext.xml中定义SpringContextHolder"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SPRING配置"><a href="#SPRING配置" class="headerlink" title="SPRING配置"></a>SPRING配置</h2><p>上文的类就是我们要用的，而其中的setApplicationContext是接口中需要实现的，Spring会自动进行填充。我们在Spring的配置文件中注册一下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"springContextUtil"</span> <span class="attr">class</span>=<span class="string">"xxx.xx.SpringContextUtil"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p>这样就可以了，Spring把我们需要的东西给我们了。<br>我们就可以在需要的地方这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YouClass obj = (YouClass)SpringUtil.getObject(<span class="string">"beanid"</span>);</span><br></pre></td></tr></table></figure></p><h1 id="方法二，使用了注解和静态化的方式来产生SpringFactory对象"><a href="#方法二，使用了注解和静态化的方式来产生SpringFactory对象" class="headerlink" title="方法二，使用了注解和静态化的方式来产生SpringFactory对象"></a>方法二，使用了注解和静态化的方式来产生SpringFactory对象</h1><p>上文的方法有个麻烦的地方：需要配置。而Spring2.5及之后的版本实际上加入了注解的方式进行依赖项的注入，使用如下代码也许更好：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> <span class="keyword">extends</span> <span class="title">SpringBeanAutowiringSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法初始化类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SpringContextUtil instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> SpringContextUtil();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据bean的id，获取对应类对象</span></span><br><span class="line">    <span class="comment">//根据bean的id获取bean对象要比根据class获取bean对象效率高，但容易出现人为错误</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String beanId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T)beanFactory.getBean(beanId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据bean的类型，获取对应类对象，</span></span><br><span class="line">    <span class="comment">//不容易出现认为错误，但效率不如根据id获取bean对象，因为spring内部是把class转换为name，然后再进行查找</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"unchecked"</span>, <span class="string">"rawtypes"</span>&#125;)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; classT)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> beanFactory.getBean(classT);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SpringContextUtil <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="注解扫描"><a href="#注解扫描" class="headerlink" title="注解扫描"></a>注解扫描</h2><p>如果使用@Autowired注解自动装配的话，继承SpringBeanAutowiringSupport类是不能少的。当然，使用@Component等注解也是可以的。使用注解的话配置就需要改动了，不过因为我们为支持Spring注解的配置是可以多用的，所以还好。如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.ahe"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置即可让org.ahe下所有包(您依然可以通过子标签的正则表达式匹配来进行更多设置)下的注解起作用。</p><h2 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h2><p>这样就可以了，Spring把我们需要的东西给我们了。<br>我们就可以在需要的地方这样做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyTestBean myTestBean = (MyTestBean ) SpringUtil.getInstance().getBean(MyTestBean.class);</span><br><span class="line">MyTestBean myTestBean1 = (MyTestBean) SpringUtil.getInstance().getBean(<span class="string">"myTestBean"</span>);</span><br></pre></td></tr></table></figure></p><h1 id="系统初始化无法获取bean"><a href="#系统初始化无法获取bean" class="headerlink" title="系统初始化无法获取bean"></a>系统初始化无法获取bean</h1><p>目前又做了个系统初始化的东东SystemInit，然后发现上面的getBean()用不了了。看了下发现是因为在系统初始化的时候SpringContextUtil还没有初始化，导致在SystemInit类里面的东西getBean()失败。<br>于是小改造了下，把ApplicationContextAware放在SystemInit类，然后注入到SpringContextUtil，这样就保证了在执行系统初始化方法之前，applicationContext一定不是null。</p><h2 id="SpringContextUtil"><a href="#SpringContextUtil" class="headerlink" title="SpringContextUtil"></a>SpringContextUtil</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring上下文配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mingchenchen</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringContextUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(SpringContextUtil.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Autowired 沿用springTest的这种方法 是否会更好？</span></span><br><span class="line">    <span class="comment">//ApplicationContext ctx;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        SpringContextUtil.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意此处变成了static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意 bean name默认 = 类名(首字母小写)</span></span><br><span class="line"><span class="comment">     * 例如: A8sClusterDao = getBean("k8sClusterDao")</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据类名获取到bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BeansException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBeanByName</span><span class="params">(Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">char</span>[] cs=clazz.getSimpleName().toCharArray();</span><br><span class="line">            cs[<span class="number">0</span>] += <span class="number">32</span>;<span class="comment">//首字母大写到小写</span></span><br><span class="line">            <span class="keyword">return</span> (T) applicationContext.getBean(String.valueOf(cs));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.containsBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.isSingleton(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统初始化代码"><a href="#系统初始化代码" class="headerlink" title="系统初始化代码"></a>系统初始化代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Descripties: 系统初始化</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wangkaiping</span></span><br><span class="line"><span class="comment"> * 2016年5月23日 上午11:58:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemInit</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>,<span class="title">ApplicationContextAware</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = Logger.getLogger(SystemInit.class);</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ClusterDao clusterDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"--------------系统初始化中-------------------"</span>);</span><br><span class="line">        initClusterCache();<span class="comment">//初始化集群数据 必须最开始完成</span></span><br><span class="line">        initRefreshAppStatusTask();</span><br><span class="line">        initUpdateAppStatusToDB();</span><br><span class="line">        initUpdateSession();</span><br><span class="line">        logger.info(<span class="string">"--------------系统初始化完成-------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1.初始化集群数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initClusterCache</span><span class="params">()</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"1.初始化集群信息到缓存中:ClusterCache开始"</span>);</span><br><span class="line">        <span class="comment">//查询数据库所有的集群数据</span></span><br><span class="line">        List&lt;ClusterEntity&gt; allClusterInfoList = clusterDao.selectAll(ClusterEntity.class, <span class="string">"delete_flag=0"</span>);</span><br><span class="line">        <span class="keyword">for</span> (ClusterEntity k8sClusterEntity : allClusterInfoList) &#123;</span><br><span class="line">            ClusterCache.put(k8sClusterEntity.getUuid() , k8sClusterEntity);<span class="comment">//存入缓存</span></span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">"1.初始化集群信息到缓存中:ClusterCache完成,总共"</span> + allClusterInfoList.size() + <span class="string">"条数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.初始化异步任务:刷新所有应用状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRefreshAppStatusTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"2.初始化任务:RefreshAllAppStatusTask 刷新应用下的k8s的pod状态并存入待更新队列"</span>);</span><br><span class="line">        RefreshAppStatusExcutor.init();</span><br><span class="line">        logger.info(<span class="string">"2.初始化任务:RefreshAllAppStatusTask 完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.初始化异步任务:更新状态到数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUpdateAppStatusToDB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"3.初始化任务:RefreshToDBTask 从待更新Appinstance队列取出数据并更新数据库"</span>);</span><br><span class="line">        UpdateAppStatusToDBExcutor.init();</span><br><span class="line">        logger.info(<span class="string">"3.初始化任务:RefreshToDBTask 完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4. 初始化异步任务： 更新用户的所有session</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initUpdateSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"4.初始化任务：更新session开始"</span>);</span><br><span class="line">        UserSessionUpdateExcutor.init();</span><br><span class="line">        logger.info(<span class="string">"4.初始化任务：更新session结束"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//此方法一定不要写成static</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span></span><br><span class="line"><span class="function">                                                <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">//实际上是把applicationContext传入到了SpringContextUtil里面</span></span><br><span class="line">        SpringContextUtil.setApplicationContext(applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring3 整合MyBatis3 配置多数据源 动态选择SqlSessionFactory</title>
      <link href="//posts/7fd48064.html"/>
      <url>//posts/7fd48064.html</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>Spring整合MyBatis切换SqlSessionFactory有两种方法，第一、 继承SqlSessionDaoSupport，重写获取SqlSessionFactory的方法。第二、继承SqlSessionTemplate 重写getSqlSessionFactory、getConfiguration和SqlSessionInterceptor这个拦截器。其中最为关键还是继承SqlSessionTemplate 并重写里面的方法。</p><p>而Spring整合MyBatis也有两种方式，一种是配置MapperFactoryBean，另一种则是利用MapperScannerConfigurer进行扫描接口或包完成对象的自动创建。相对来说后者更方便些。MapperFactoryBean继承了SqlSessionDaoSupport也就是动态切换SqlSessionFactory的第一种方法，我们需要重写和实现SqlSessionDaoSupport方法，或者是继承MapperFactoryBean来重写覆盖相关方法。如果利用MapperScannerConfigurer的配置整合来切换SqlSessionFactory，那么我们就需要继承SqlSessionTemplate，重写上面提到的方法。在整合的配置中很多地方都是可以注入SqlSessionTemplate代替SqlSessionFactory的注入的。因为SqlSessionTemplate的创建也是需要注入SqlSessionFactory的。</p><a id="more"></a><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="继承SqlSessionTemplate-重写getSqlSessionFactory、getConfiguration和SqlSessionInterceptor"><a href="#继承SqlSessionTemplate-重写getSqlSessionFactory、getConfiguration和SqlSessionInterceptor" class="headerlink" title="继承SqlSessionTemplate 重写getSqlSessionFactory、getConfiguration和SqlSessionInterceptor"></a>继承SqlSessionTemplate 重写getSqlSessionFactory、getConfiguration和SqlSessionInterceptor</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.reflect.Proxy.newProxyInstance;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.apache.ibatis.reflection.ExceptionUtil.unwrapThrowable;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mybatis.spring.SqlSessionUtils.closeSqlSession;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mybatis.spring.SqlSessionUtils.getSqlSession;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mybatis.spring.SqlSessionUtils.isSqlSessionTransactional;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.exceptions.PersistenceException;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.BatchResult;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ExecutorType;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.ResultHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.RowBounds;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.MyBatisExceptionTranslator;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.support.PersistenceExceptionTranslator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;function:&lt;/b&gt; 继承SqlSessionTemplate 重写相关方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hoojo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2013-10-18 下午03:07:46</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span> CustomSqlSessionTemplate.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> com.hoo.framework.mybatis.support</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> SHMB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> http://blog.csdn.net/IBM_hoojo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> hoojo_@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSqlSessionTemplate</span> <span class="keyword">extends</span> <span class="title">SqlSessionTemplate</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorType executorType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SqlSession sqlSessionProxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PersistenceExceptionTranslator exceptionTranslator;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, SqlSessionFactory&gt; targetSqlSessionFactorys;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionFactory defaultTargetSqlSessionFactory;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTargetSqlSessionFactorys</span><span class="params">(Map&lt;Object, SqlSessionFactory&gt; targetSqlSessionFactorys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.targetSqlSessionFactorys = targetSqlSessionFactorys;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultTargetSqlSessionFactory</span><span class="params">(SqlSessionFactory defaultTargetSqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.defaultTargetSqlSessionFactory = defaultTargetSqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomSqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(sqlSessionFactory, sqlSessionFactory.getConfiguration().getDefaultExecutorType());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomSqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory, ExecutorType executorType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(sqlSessionFactory, executorType, <span class="keyword">new</span> MyBatisExceptionTranslator(sqlSessionFactory.getConfiguration()</span><br><span class="line">                .getEnvironment().getDataSource(), <span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomSqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory, ExecutorType executorType,</span></span></span><br><span class="line"><span class="function"><span class="params">            PersistenceExceptionTranslator exceptionTranslator)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">super</span>(sqlSessionFactory, executorType, exceptionTranslator);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">        <span class="keyword">this</span>.executorType = executorType;</span><br><span class="line">        <span class="keyword">this</span>.exceptionTranslator = exceptionTranslator;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.sqlSessionProxy = (SqlSession) newProxyInstance(</span><br><span class="line">                SqlSessionFactory.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> Class[] &#123; SqlSession.class &#125;, </span><br><span class="line">                <span class="keyword">new</span> SqlSessionInterceptor());</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">this</span>.defaultTargetSqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        SqlSessionFactory targetSqlSessionFactory = targetSqlSessionFactorys.get(CustomerContextHolder.getContextType());</span><br><span class="line">        <span class="keyword">if</span> (targetSqlSessionFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> targetSqlSessionFactory;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (defaultTargetSqlSessionFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> defaultTargetSqlSessionFactory;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Assert.notNull(targetSqlSessionFactorys, <span class="string">"Property 'targetSqlSessionFactorys' or 'defaultTargetSqlSessionFactory' are required"</span>);</span><br><span class="line">            Assert.notNull(defaultTargetSqlSessionFactory, <span class="string">"Property 'defaultTargetSqlSessionFactory' or 'targetSqlSessionFactorys' are required"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Configuration <span class="title">getConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getSqlSessionFactory().getConfiguration();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExecutorType <span class="title">getExecutorType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.executorType;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> PersistenceExceptionTranslator <span class="title">getPersistenceExceptionTranslator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.exceptionTranslator;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;T&gt; selectOne(statement);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;T&gt; selectOne(statement, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">selectMap</span><span class="params">(String statement, String mapKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;K, V&gt; selectMap(statement, mapKey);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">selectMap</span><span class="params">(String statement, Object parameter, String mapKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;K, V&gt; selectMap(statement, parameter, mapKey);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">selectMap</span><span class="params">(String statement, Object parameter, String mapKey, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;K, V&gt; selectMap(statement, parameter, mapKey, rowBounds);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;E&gt; selectList(statement);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;E&gt; selectList(statement, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String statement, Object parameter, RowBounds rowBounds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.&lt;E&gt; selectList(statement, parameter, rowBounds);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">(String statement, ResultHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionProxy.select(statement, handler);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">(String statement, Object parameter, ResultHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionProxy.select(statement, parameter, handler);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">(String statement, Object parameter, RowBounds rowBounds, ResultHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionProxy.select(statement, parameter, rowBounds, handler);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.insert(statement);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.insert(statement, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.update(statement);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.update(statement, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.delete(statement);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(String statement, Object parameter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.delete(statement, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getConfiguration().getMapper(type, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Manual commit is not allowed over a Spring managed SqlSession"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Manual commit is not allowed over a Spring managed SqlSession"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Manual rollback is not allowed over a Spring managed SqlSession"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">(<span class="keyword">boolean</span> force)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Manual rollback is not allowed over a Spring managed SqlSession"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Manual close is not allowed over a Spring managed SqlSession"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionProxy.clearCache();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0.2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;BatchResult&gt; <span class="title">flushStatements</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionProxy.flushStatements();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Proxy needed to route MyBatis method calls to the proper SqlSession got from Spring's Transaction Manager It also</span></span><br><span class="line"><span class="comment">     * unwraps exceptions thrown by &#123;<span class="doctag">@code</span> Method#invoke(Object, Object...)&#125; to pass a &#123;<span class="doctag">@code</span> PersistenceException&#125; to</span></span><br><span class="line"><span class="comment">     * the &#123;<span class="doctag">@code</span> PersistenceExceptionTranslator&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> SqlSession sqlSession = getSqlSession(</span><br><span class="line">                    CustomSqlSessionTemplate.<span class="keyword">this</span>.getSqlSessionFactory(),</span><br><span class="line">                    CustomSqlSessionTemplate.<span class="keyword">this</span>.executorType, </span><br><span class="line">                    CustomSqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Object result = method.invoke(sqlSession, args);</span><br><span class="line">                <span class="keyword">if</span> (!isSqlSessionTransactional(sqlSession, CustomSqlSessionTemplate.<span class="keyword">this</span>.getSqlSessionFactory())) &#123;</span><br><span class="line">                    <span class="comment">// force commit even on non-dirty sessions because some databases require</span></span><br><span class="line">                    <span class="comment">// a commit/rollback before calling close()</span></span><br><span class="line">                    sqlSession.commit(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Throwable unwrapped = unwrapThrowable(t);</span><br><span class="line">                <span class="keyword">if</span> (CustomSqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator != <span class="keyword">null</span> &amp;&amp; unwrapped <span class="keyword">instanceof</span> PersistenceException) &#123;</span><br><span class="line">                    Throwable translated = CustomSqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator</span><br><span class="line">                        .translateExceptionIfPossible((PersistenceException) unwrapped);</span><br><span class="line">                    <span class="keyword">if</span> (translated != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        unwrapped = translated;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> unwrapped;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                closeSqlSession(sqlSession, CustomSqlSessionTemplate.<span class="keyword">this</span>.getSqlSessionFactory());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重写后的getSqlSessionFactory方法会从我们配置的SqlSessionFactory集合targetSqlSessionFactorys或默认的defaultTargetSqlSessionFactory中获取Session对象。而改写的SqlSessionInterceptor 是这个MyBatis整合Spring的关键，所有的SqlSessionFactory对象的session都将在这里完成创建、提交、关闭等操作。所以我们改写这里的代码，在这里获取getSqlSessionFactory的时候，从多个SqlSessionFactory中获取我们设置的那个即可。</p><p>上面添加了targetSqlSessionFactorys、defaultTargetSqlSessionFactory两个属性来配置多个SqlSessionFactory对象和默认的SqlSessionFactory对象。</p><h3 id="CustomerContextHolder-设置SqlSessionFactory的类型"><a href="#CustomerContextHolder-设置SqlSessionFactory的类型" class="headerlink" title="CustomerContextHolder 设置SqlSessionFactory的类型"></a>CustomerContextHolder 设置SqlSessionFactory的类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;b&gt;function:&lt;/b&gt; 多数据源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hoojo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@createDate</span> 2013-9-27 上午11:36:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@file</span> CustomerContextHolder.java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> com.hoo.framework.spring.support</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@project</span> SHMB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blog</span> http://blog.csdn.net/IBM_hoojo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> hoojo_@126.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerContextHolder</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SESSION_FACTORY_MYSQL = <span class="string">"mysql"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String SESSION_FACTORY_ORACLE = <span class="string">"oracle"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;String&gt; contextHolder = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setContextType</span><span class="params">(String contextType)</span> </span>&#123;  </span><br><span class="line">        contextHolder.set(contextType);  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getContextType</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> contextHolder.get();  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearContextType</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        contextHolder.remove();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置相关的文件applicationContext-session-factory-xml"><a href="#配置相关的文件applicationContext-session-factory-xml" class="headerlink" title="配置相关的文件applicationContext-session-factory.xml"></a>配置相关的文件applicationContext-session-factory.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mysqlDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- Filters --&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- &lt;property name="filters" value="config,stat" /&gt;  </span></span><br><span class="line"><span class="comment">        &lt;property name="connectionProperties" value="config.decrypt=true" /&gt; --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x'"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!-- 数据源2 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleDataSource"</span> <span class="attr">class</span>=<span class="string">"com.alibaba.druid.pool.DruidDataSource"</span> <span class="attr">init-method</span>=<span class="string">"init"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 基本属性 url、user、password --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;dataSource2.driver&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;dataSource2.url&#125;"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;dataSource2.username&#125;"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;dataSource2.password&#125;"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 配置初始化大小、最小、最大 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 配置获取连接等待超时的时间 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"timeBetweenEvictionRunsMillis"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minEvictableIdleTimeMillis"</span> <span class="attr">value</span>=<span class="string">"300000"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"validationQuery"</span> <span class="attr">value</span>=<span class="string">"SELECT 'x' FROM DUAL"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testWhileIdle"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnReturn"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 打开PSCache，并且指定每个连接上PSCache的大小 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolPreparedStatementPerConnectionSize"</span> <span class="attr">value</span>=<span class="string">"20"</span> /&gt;</span>    </span><br><span class="line">        <span class="comment">&lt;!-- 配置监控统计拦截的filters --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filters"</span> <span class="attr">value</span>=<span class="string">"stat"</span> /&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line">      </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"oracleSqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"oracleDataSource"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/mybatis-config.xml"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- mapper和resultmap配置路径 --&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">                <span class="comment">&lt;!-- 表示在com.hoo目录下的任意包下的resultmap包目录中，以-resultmap.xml或-mapper.xml结尾所有文件 --&gt;</span>   </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:/mapper/TestMapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!-- 配置SqlSessionFactoryBean --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mysqlSqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"mysqlDataSource"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis/mybatis-config.xml"</span>/&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- mapper和resultmap配置路径 --&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">                <span class="comment">&lt;!-- 表示在com.hoo目录下的任意包下的resultmap包目录中，以-resultmap.xml或-mapper.xml结尾所有文件 （oracle和mysql扫描的配置和路径不一样，如果是公共的都扫描 这里要区分下，不然就报错 找不到对应的表、视图）--&gt;</span>   </span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:com/zlzkj/app/mapper/*-mapper.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>      </span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!-- 配置自定义的SqlSessionTemplate模板，注入相关配置 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionTemplate"</span> <span class="attr">class</span>=<span class="string">"com.zlzkj.app.support.CustomSqlSessionTemplate"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"mysqlSqlSessionFactory"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetSqlSessionFactorys"</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span>       </span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"oracleSqlSessionFactory"</span> <span class="attr">key</span>=<span class="string">"oracle"</span>/&gt;</span>  </span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">value-ref</span>=<span class="string">"mysqlSqlSessionFactory"</span> <span class="attr">key</span>=<span class="string">"mysql"</span>/&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">&lt;!-- 通过扫描的模式，扫描目录在com/hoo/任意目录下的mapper目录下，所有的mapper都需要继承SqlMapper接口的接口 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 注意注入sqlSessionTemplate --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionTemplateBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionTemplate"</span>/&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"com.zlzkj.app.mapper,com.zlzkj.core.mybatis,com.zlzkj.app.omapper"</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Sercice测试调用"><a href="#Sercice测试调用" class="headerlink" title="Sercice测试调用"></a>Sercice测试调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CustomerContextHolder.setContextType(CustomerContextHolder.SESSION_FACTORY_ORACLE);  </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    Test test = mapper.selectByPrimaryKey((<span class="keyword">short</span>)<span class="number">1</span>);  </span><br><span class="line">    System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;"</span>+test.getName());  </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">    e.printStackTrace();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，如果数据能读出来，那就恭喜你，你配置多数据源成功了。</p><h2 id="注解支持"><a href="#注解支持" class="headerlink" title="注解支持"></a>注解支持</h2><p>使用注解方式, 动态配置数据源</p><h3 id="自定义定义注解"><a href="#自定义定义注解" class="headerlink" title="自定义定义注解:"></a>自定义定义注解:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切换数据源</span></span><br><span class="line"><span class="comment"> * 在service impl方法进行注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SwitchDataSource &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">DataSoure <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> DataSoure.gt3</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> DataSoure &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//mysql数据源</span></span><br><span class="line">    mysql,</span><br><span class="line">    <span class="comment">//oracle数据源</span></span><br><span class="line">    oracle</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="AOP拦截注解"><a href="#AOP拦截注解" class="headerlink" title="AOP拦截注解"></a>AOP拦截注解</h3><p>使用业务前置的方式,对业务方法进行切面处理<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源切面处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwitchDataSourceAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(value = <span class="string">"execution(* gov.etax.dzswj.nsrzx.services..service..*.*(..)) and @annotation(gov.etax.dzswj.nsrzx.services.common.datasource.annotation.SwitchDataSource))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        Signature signature = joinPoint.getSignature();</span><br><span class="line">        MethodSignature methodSignature = (MethodSignature) signature;</span><br><span class="line">        Method method = methodSignature.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method != <span class="keyword">null</span>) &#123;</span><br><span class="line">            SwitchDataSource annotation = method.getAnnotation(SwitchDataSource.class);</span><br><span class="line">            <span class="comment">//设置数据源</span></span><br><span class="line">            CustomerContextHolder.setContextType(annotation.value().name());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CustomerContextHolder.clearContextType();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 纳税人信息查询服务实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SIVEN</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NsrxxServiceImpl</span> <span class="keyword">implements</span> <span class="title">INsrxxService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SwitchDataSource</span>(DataSoure.gt3)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultDto&lt;NsrxxDto&gt; <span class="title">queryNsrxxByDjxh</span><span class="params">(QueryDto&lt;QueryByDjxh&gt; dto)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int i = 1 /0;</span></span><br><span class="line">        INsrxxMapper mapper = SessionTemplateUtil.getMapper(INsrxxMapper.class);</span><br><span class="line">        <span class="keyword">return</span> ResultDtoHelper.success(mapper.queryNsrxxByDjxh(dto.getQueryObj()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考文章:</p><ul><li><a href="http://www.cnblogs.com/hoojo/p/dynamic_switch_sqlSessionfactory_muliteSqlSessionFactory.html" target="_blank" rel="noopener">Spring3 整合MyBatis3 配置多数据源 动态选择SqlSessionFactory</a></li><li><a href="http://blog.csdn.net/qq_28118497/article/details/52751202" target="_blank" rel="noopener">Spring+Mybatis多数据源配置mysql+oracle</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> Mybatis </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>让Mac也能拥有apt-get类似的功能——Brew</title>
      <link href="//posts/3f92a831.html"/>
      <url>//posts/3f92a831.html</url>
      
        <content type="html"><![CDATA[<p>原文地址：<a href="http://snowolf.iteye.com/blog/774312" target="_blank" rel="noopener">http://snowolf.iteye.com/blog/774312</a></p><p>之前一直怀念ubuntu下的apt-get，因为实在是方便，需要安装什么，一个命令搞定，相关的依赖包统统由apt-get维护。下载，编译，安装，那叫一个痛快。什么软件用着不爽，一个命令卸载！</p><p>怀念apt-get之余，发现了替代工具MacPorts，据说也可以解决我的问题。但可惜，我总是无法更新本地软件索引库！</p><p>homebrew主页对brew进行了详细的描述，不过我们更希望下载下来实战演练！</p><a id="more"></a><h2 id="1-安装brew："><a href="#1-安装brew：" class="headerlink" title="1.安装brew："></a>1.安装brew：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -LsSf http://github.com/mxcl/homebrew/tarball/master | sudo tar xvz -C/usr/<span class="built_in">local</span> --strip 1</span><br></pre></td></tr></table></figure><p>上述命令，在官网上可以找到！</p><h2 id="2-使用brew安装软件"><a href="#2-使用brew安装软件" class="headerlink" title="2.使用brew安装软件"></a>2.使用brew安装软件</h2><p>别的工具不说，wget少不了，但是mac上默认没有！<br>就先拿它来开刀了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install wget</span><br></pre></td></tr></table></figure><p>甚至是安装tomcat：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install tomcat</span><br></pre></td></tr></table></figure><h2 id="3-使用brew卸载软件"><a href="#3-使用brew卸载软件" class="headerlink" title="3.使用brew卸载软件"></a>3.使用brew卸载软件</h2><p>安装简单，卸载就更简单了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall unrar</span><br></pre></td></tr></table></figure><h2 id="4-使用brew检索软件"><a href="#4-使用brew检索软件" class="headerlink" title="4.使用brew检索软件"></a>4.使用brew检索软件</h2><p>看看我们能搜到什么：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew search /apache*/</span><br></pre></td></tr></table></figure><p>/apache*/使用的是正则表达式，注意使用/分隔！</p>]]></content>
      
      
      <categories>
          
          <category> MAC OS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MAC OS </tag>
            
            <tag> Brew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>两台Linux服务器之间通过SCP传输文件夹（无须密码验证）</title>
      <link href="//posts/25395298.html"/>
      <url>//posts/25395298.html</url>
      
        <content type="html"><![CDATA[<p>原文参考：<a href="http://buddie.iteye.com/blog/1988730" target="_blank" rel="noopener">http://buddie.iteye.com/blog/1988730</a></p><p>最近因工作需要，要在两台Linux服务器之间传输文件夹。<br>Linux命令选择是SCP，SCP命令的基本格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -p port user@serverip:/home/user/filename /home/user/filename</span><br></pre></td></tr></table></figure><p>以上端口p 为参数，port 端口；<br>user 为远程服务器的用户；<br>serverip 为远程服务器ip或者域名；<br>第一个/home/user/filename 为要传输的远程服务器的文件名；<br>第二个/home/user/filename 为本地服务服务器的文件名。</p><a id="more"></a><p>如果端口是默认，则可省略-p port；如果传传输的为文件夹，则要加-r参数。如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r user@serverip:/home/user/folder /home/user/folder</span><br></pre></td></tr></table></figure></p><p>以上是从serverip这台服务器上下载文件夹/home/user/folder到本服务器的/home/user/folder中。<br>如果要从本地上传文件夹到远程服务器，那就是下面的类似指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /home/user/folder user@serverip:/home/user/folder</span><br></pre></td></tr></table></figure><p> 这样就实现了两台Linux服务器之间的文件、文件夹传输。</p><p>可是每次都要输入密码验证，很麻烦。<br>为了不用每次输入密码验证，需要在两个服务器这间建立互信通信。<br>首先，使用ssh-keygen生成密钥文件和私钥文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></p><p>其中rsa为一种加密方式，另一种为dsa<br>这时，服务器会提醒你输入密钥文件的文件名，默认为/root/.ssh/id_rsa<br>直接回车<br>这时，服务器会提醒你输入密码。如果想以后通过该密钥在两台服务器这间通信时，不需要再输入密码的话，这个时候，就不用输入任务字符，直接回车就好！<br>系统会再确认一下密码，仍然回车。<br>这样就在/root/.ssh/目录下，生成了id_rsa.pub和id_rsa两上文件。</p><p>接下来，就要将id_rsa.pub文件上传到目标服务器的/root/.ssh/目录下，重命名为authorized_keys</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /root/.ssh/id_rsa.pub user@serverip:/root/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>这时，输入目标服务器的密码，待文件传输完成后即可。<br>如果目标服务器上，已经存在了authorized_keys，那么就将id_rsa.pub中的内容追加到目标服务器的authorized_keys文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /root/.ssh/id_rsa.pub | ssh user@serverip <span class="string">'cat &gt;&gt; /root/.ssh/authorized_keys'</span></span><br></pre></td></tr></table></figure><p>此时，再使用scp在这两台服务器这间传输文件，只有第一次，需要输入密码外，以后就再也不用输入密码验证了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="//posts/4a17b156.html"/>
      <url>//posts/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>参考资料：</p><ul><li><a href="http://muyunyun.cn/posts/f55182c5/#more" target="_blank" rel="noopener">hexo 摸爬滚打之进阶教程</a></li><li><a href="https://www.v2ex.com/t/298727" target="_blank" rel="noopener">Hexo next 主题的 local search 功能失效，点击搜索链接无法弹出叠加层</a></li><li><a href="http://blog.csdn.net/huihut/article/details/73196343" target="_blank" rel="noopener">hexo 构建静态文件无法生成 index.html等文件</a></li><li><a href="https://zhuanlan.zhihu.com/p/21518843" target="_blank" rel="noopener">Hexo进程守护</a></li><li><a href="https://www.jianshu.com/p/4ef35521fee9" target="_blank" rel="noopener">Hexo-Next-主题优化</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
